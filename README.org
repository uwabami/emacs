#+title: Emacs の設定
# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+startup: overview
#+options: auto-id:t H:6
#+date: 2021-08-05 02:04:15
* はじめに
  :PROPERTIES:
  :CUSTOM_ID: org66fa74cd
  :END:
  ここでは私の Emacs の設定についてまとめています．

  #+html: <amp-img src="https://github.com/uwabami/emacs/actions/workflows/build.yml/badge.svg" width=104px height=20px layout=fixed class="github_badge"><amp-img>
  #+html: <amp-img src="https://img.shields.io/badge/License-GPLv3-blue.svg" width="92px" height="20px" layout="fixed"></amp-img>
  #+html: <a href="https://github.com/uwabami/emacs"><span class="icon-github"><svg id="SVGRoot" width="20px" height="20px" version="1.1" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="m5.4144 12.761c0 0.0645-0.0742 0.11613-0.16774 0.11613-0.10645 0.01-0.18064-0.0419-0.18064-0.11613 0-0.0645 0.0742-0.11613 0.16774-0.11613 0.0968-0.01 0.18064 0.0419 0.18064 0.11613zm-1.0032-0.14516c-0.0226 0.0645 0.0419 0.13871 0.13871 0.15806 0.0839 0.0323 0.18064 0 0.2-0.0645 0.0194-0.0645-0.0419-0.13871-0.13871-0.16775-0.0839-0.0226-0.17742 0.01-0.2 0.0742zm1.4258-0.0548c-0.0935 0.0226-0.15806 0.0839-0.14838 0.15806 0.01 0.0645 0.0935 0.10645 0.19032 0.0839 0.0936-0.0226 0.15806-0.0839 0.14839-0.14838-0.01-0.0613-0.0968-0.10323-0.19033-0.0935zm2.1226-12.361c-4.4742 0-7.8968 3.3968-7.8968 7.871 0 3.5774 2.2516 6.6387 5.4677 7.7161 0.41291 0.0742 0.55807-0.18064 0.55807-0.39032 0-0.2-0.01-1.3032-0.01-1.9806 0 0-2.2581 0.48387-2.7323-0.96129 0 0-0.36774-0.93871-0.89677-1.1806 0 0-0.73871-0.50645 0.0516-0.49677 0 0 0.80323 0.0645 1.2452 0.83226 0.70645 1.2452 1.8903 0.88709 2.3516 0.67419 0.0742-0.51613 0.28387-0.87419 0.51613-1.0871-1.8032-0.2-3.6226-0.46129-3.6226-3.5645 0-0.8871 0.24516-1.3323 0.76129-1.9-0.0839-0.20968-0.35806-1.0742 0.0839-2.1903 0.6742-0.20967 2.2258 0.87097 2.2258 0.87097 0.64516-0.18064 1.3387-0.27419 2.0258-0.27419 0.68709 0 1.3806 0.0936 2.0258 0.27419 0 0 1.5516-1.0839 2.2258-0.87097 0.44193 1.1194 0.16774 1.9806 0.0839 2.1903 0.51613 0.57096 0.83226 1.0161 0.83226 1.9 0 3.1129-1.9 3.3613-3.7032 3.5645 0.29678 0.25484 0.54839 0.73871 0.54839 1.4968 0 1.0871-0.01 2.4322-0.01 2.6968 0 0.20968 0.14839 0.46452 0.55807 0.39032 3.2258-1.071 5.4129-4.1322 5.4129-7.7097 0-4.4742-3.629-7.871-8.1032-7.871zm-4.7613 11.126c-0.0419 0.0323-0.0323 0.10646 0.0226 0.16775 0.0516 0.0516 0.12581 0.0742 0.16775 0.0323 0.0419-0.0323 0.0323-0.10645-0.0226-0.16774-0.0516-0.0516-0.12581-0.0742-0.16775-0.0323zm-0.34838-0.26129c-0.0226 0.0419 0.01 0.0935 0.0742 0.12581 0.0516 0.0323 0.11613 0.0226 0.13871-0.0226 0.0226-0.0419-0.01-0.0935-0.0742-0.12581-0.0645-0.0194-0.11613-0.01-0.13871 0.0226zm1.0452 1.1484c-0.0516 0.0419-0.0323 0.13871 0.0419 0.2 0.0742 0.0742 0.16775 0.0839 0.20968 0.0323 0.0419-0.0419 0.0226-0.13871-0.0419-0.2-0.071-0.0742-0.16775-0.0839-0.20968-0.0323zm-0.36774-0.47419c-0.0516 0.0323-0.0516 0.11613 0 0.19032 0.0516 0.0742 0.13871 0.10645 0.18064 0.0742 0.0516-0.0419 0.0516-0.1258 0-0.2-0.0452-0.0742-0.12903-0.10645-0.18064-0.0645z" fill="currentColor" stroke-width=".032258"/></svg></span></a>

  基本方針は以下の通り:
** Debian パッケージがインストールされているならばそれを優先する
   :PROPERTIES:
   :CUSTOM_ID: org5eaa4818
   :END:
   :[[https://en.wikipedia.org/wiki/Eating_your_own_dog_food][Eating your own dog food - Wikipedia]]

   Emacsに関連するDebianパッケージを幾つかメンテナンスしているので,
   可能な限りDebianパッケージを使うことにしています．
** [[https://github.com/conao3/leaf.el][leaf.el]]でEmacs のパッケージの導入と設定を行なう
   :PROPERTIES:
   :CUSTOM_ID: orgd2ba4ef2
   :END:
   設定には[[https://github.com/conao3/leaf.el][leaf.el]]を利用します．
   VCS からインストールしたいパッケージが幾つかあるので,
   それらについては[[https://github.com/dimitri/el-get][el-get]]を利用しています．
** 設定は [[http://orgmode.org/][Org mode]] で書きたい
   :PROPERTIES:
   :CUSTOM_ID: org458d9cf4
   :END:
   以前こんなブログ記事を書きました→ [[http://uwabami.junkhub.org/log/20111213.html#p01][Emacsの設定ファイルをorgで書く]]

   というわけで, 設定は [[http://orgmode.org/worg/org-contrib/babel/intro.html][Org Babel]] で書いています.
   本ファイル(=README.org=) から,
   Makefile 内の以下のスクリプトで =~/init.el= を生成し, byte-compile します.
   #+begin_src makefile-gmake :tangle no
EMACS   ?= emacs
init.el: README.org
    $(EMACS) -Q -q --batch --eval \
       "(progn \
          (require 'ob-tangle) \
          (org-babel-tangle-file \"$<\" \"$@\" \"emacs-lisp\"))"
    $(EMACS) -q -l init.el --batch --eval '(kill-emacs)'
%.elc: %.el
    $(EMACS) -q -l init.el -batch -f batch-byte-compile $<
   #+end_src
** 設定ファイルのヘッダ
   :PROPERTIES:
   :CUSTOM_ID: org990b5166
   :END:
   出力される =init.el= 用のヘッダは以下の通り.
   =lexsical-binding= を有効にしておきます．
   #+begin_src emacs-lisp :tangle init.el
;; -*- lexical-binding: nil -*-
   #+end_src
** 起動の高速化
   :PROPERTIES:
   :CUSTOM_ID: orgae182d4d
   :END:
   この辺は [[https://emacs-jp.github.io/tips/startup-optimization][Emacs の起動時間を""詰める""]] を参考に.
   設定は =early-init.el= に移動した方が良いのかもしれないかな.
*** Emacs Profiler
    :PROPERTIES:
    :CUSTOM_ID: org373f7f70
    :END:
    起動の高速化を検証するために, 必要に応じて有効に.
    #+begin_src emacs-lisp :tangle init.el
;; (require 'profiler)
;; (profiler-start 'cpu)
    #+end_src
*** Magic File Name を一時的に無効化
    :PROPERTIES:
    :CUSTOM_ID: orgb6dd6727
    :END:
    これだけで 0.2秒縮まった. これは知見である.
    #+begin_src emacs-lisp :tangle init.el
(defconst my:saved-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist my:saved-file-name-handler-alist)))
    #+end_src
*** GC の設定
    :PROPERTIES:
    :CUSTOM_ID: org77e2f299
    :END:
    起動時に garbage collection を発生させない様にする.

    メモリ喰いな拡張を入れている場合には,
    安易に =gc-cons-threshold= を上げるのは考えものである.
    「gc が走る→大きな領域を掃除するのでその間 emacs が止まる」
    という事を頻繁に経験することになるだろう.

    とはいえ, デフォルト値のままだと
    起動時に結構 garbage-collect が走って遅くなるので,
    起動時は =most-positive-fixnum= にしておいて,
    起動後に =emacs-startup-hook= で default に戻すようにしてみた.

    ついでに =idle-timer= で入力が無い時に GC を走らせることに.
    #+begin_src emacs-lisp :tangle init.el
(defconst my:default-gc-cons-threshold gc-cons-threshold)
(setq gc-cons-threshold most-positive-fixnum)
;; Run GC every 60 seconds if emacs is idle.
(run-with-idle-timer 60.0 t #'garbage-collect)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold my:default-gc-cons-threshold)))
    #+end_src
*** =early-init.el=
    :PROPERTIES:
    :CUSTOM_ID: orgcb2bfa7b
    :END:
    Emacs >= 27 からの機能だが, いまいち使い方がわからん.
    #+begin_src emacs-lisp :tangle early-init.el
(push '(vertical-scroll-bars . nil) default-frame-alist)
(push '(menu-bar-lines       . nil) default-frame-alist)
(push '(tool-bar-lines       . nil) default-frame-alist)
(push '(scroll-bar-mode      . nil) default-frame-alist)
(push '(blink-cursor-mode    . nil) default-frame-alist)
(push '(column-number-mode   . nil) default-frame-alist)
(setq frame-inhibit-implied-resize t)
(setq site-run-file nil)
;; (Setq window-divider-default-right-width 3)
(setq package-enable-at-startup nil)
(provide 'early-init)
;;; early-init.el ends here
    #+end_src
** ディレクトリ構成の修正
   :PROPERTIES:
   :CUSTOM_ID: org60bad8a3
   :END:
   分割した設定ファイル群やパッケージでinstallしたパッケージ
   の置き場所は =user-emacs-directory= 以下にまとめています。

   ディレクトリ構成は以下のようにしました:
   #+begin_example
    ~/.emacs.d/
     |-- Makefile    ←  byte-compile 用の rule
     |-- README.org  ←  本ファイル．`org-babel-tangle' で init.el を生成
     |-- pkg
     |   |-- elpa/   ←  package.el で導入したパッケージが置かれる場所
     |   `-- el-get/ ←  el-get で導入したパッケージが置かれる場所
     |-- share/      ←  (基本的に)参照するだけの資源置き場所
     `-- tmp/        ←  一次ファイルの置き場所
   #+end_example
   上記ディレクトリ構成を設定ファイルで使用するために
   ディレクトリ配置を宣言しておきます。
   #+begin_src emacs-lisp :tangle init.el
(when load-file-name
  (setq user-emacs-directory
        (expand-file-name (file-name-directory load-file-name))))
(defconst my:d:share
  (expand-file-name "share/" user-emacs-directory))
(defconst my:d:tmp
  (expand-file-name "tmp/" user-emacs-directory))
(defconst my:d:pkg:elpa
  (expand-file-name "pkg/elpa" user-emacs-directory))
(defconst my:d:pkg:elget
  (expand-file-name "pkg/el-get" user-emacs-directory))
   #+end_src
   その他, 良く使うディレクトリもここで設定しておきます．
   #+begin_src emacs-lisp :tangle init.el
(defconst my:d:org (concat (getenv "HOME") "/Nextcloud/org/"))
   #+end_src
** Byte-Compile 時の Common Lisp の読み込み
   :PROPERTIES:
   :CUSTOM_ID: org87c9febb
   :END:
   幾つかの関数で =Common-Lisp= 的挙動が期待されているので,
   =cl-lib= を読み込んでおきます．
   #+begin_src emacs-lisp :tangle init.el
(eval-when-compile (require 'cl-lib nil t))
   #+end_src
   ついでに Emacs 27 以降は
   cl が読み込まれていると
   `Package cl is deprecated' が表示されるので, これを止めておく.
   #+begin_src emacs-lisp :tangle init.el
(setq byte-compile-warnings '(not cl-functions obsolete))
   #+end_src
* Package 関連: [[https://emacs-jp.github.io/packages/package-management/package-el][package.el]], [[https://github.com/conao3/leaf.el][leaf.el]], [[https://github.com/dimitri/el-get][el-get]]
  :PROPERTIES:
  :CUSTOM_ID: orgcf4176e7
  :END:
  [[https://github.com/conao3/leaf.el][leaf.el]]のおかげで,
  無いと途方に暮れるパッケージ以外のインストールは無視できるようになります.
** [[https://emacs-jp.github.io/packages/package-management/package-el][package.el]]
   :PROPERTIES:
   :CUSTOM_ID: orgc51eb87d
   :END:
   パッケージは基本的に =package.el= で導入するので, 先ずはその設定.
   #+begin_src emacs-lisp :tangle init.el
;; elpa/gnutls workaround
(eval-and-compile
  (when (version<=  emacs-version "26.2")
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
  (custom-set-variables
   '(package-archives '(("gnu"   . "https://elpa.gnu.org/packages/")
                        ("melpa" . "https://melpa.org/packages/")
                        ("org" . "https://orgmode.org/elpa/")
                        ))
   '(package-gnupghome-dir (expand-file-name ".gnupg" (getenv "HOME")))
   '(package-user-dir my:d:pkg:elpa))
  )
(eval-when-compile
  (unless (file-exists-p (locate-user-emacs-file "tmp/bootstrap-stamp"))
    (package-refresh-contents)
    (with-temp-buffer
      (write-file (locate-user-emacs-file "tmp/bootstrap-stamp")))
    ))
(package-initialize)
   #+end_src
** [[https://github.com/conao3/leaf.el][leaf.el]]
   :PROPERTIES:
   :CUSTOM_ID: orgc2ededbf
   :END:
   個々のパッケージの設定には[[https://github.com/conao3/leaf.el][leaf.el]]を利用します.
   自分で修正した版やオリジナル版を別の場所から持ってくる場合は
   [[https://github.com/conao3/leaf.el][leaf.el]]から[[https://github.com/dimitri/el-get][el-get]]を呼び出します.
   #+begin_src emacs-lisp :tangle init.el
(unless (package-installed-p 'leaf)
  (package-refresh-contents)
  (package-install 'leaf t))
;; (require 'leaf nil 'noerror)
;; (defvar leaf--load-file-name nil)
(leaf leaf-keywords
  :ensure t
  :init
  (leaf blackout :ensure t)
  (leaf el-get
    :ensure t
    :preface
    (defconst el-get-dir my:d:pkg:elget) ;; override el-get default
    :custom ((el-get-notify-type       . 'message)
             (el-get-git-shallow-clone . t))
    )
  )
(leaf-keywords-init)
   #+end_src
* =exec-path-from-shell=: 環境変数の読み込み
  :PROPERTIES:
  :CUSTOM_ID: org9abae8f2
  :END:
  shell(zsh)で設定した =PATH= などの環境変数をEmacsに引き継ぐために
  [[https://github.com/purcell/exec-path-from-shell][purcell/exec-path-from-shell]] を使います.
  今の所
  - =DEBEMAIL=
  - =DEBFULLNAME=
  - =GPG_AGENT_INFO=
  - =GPG_KEY_ID=
  - =PASSWORD_STORE_DIR=
  - =PATH=
  - =SHELL=
  - =SKKSERVER=
  - =TEXMFHOME=
  - =WSL_DISTRO_NAME=
  - =http_proxy=
  を読み込んでいます(多いな...).
  #+begin_src emacs-lisp :tangle init.el
(leaf exec-path-from-shell
  :ensure t
  :defun (exec-path-from-shell-initialize)
  :custom
  ((exec-path-from-shell-check-startup-files . nil)
   (exec-path-from-shell-arguments . nil)
   (exec-path-from-shell-variables
    . '(
        "DEBEMAIL"
        "DEBFULLNAME"
        "GPG_AGENT_INFO"
        "GPG_KEY_ID"
        "PASSWORD_STORE_DIR"
        "PATH"
        "SHELL"
        "SKKSERVER"
        "TEXMFHOME"
        "WSL_DISTRO_NAME"
        "http_proxy"
        )))
  :config
  (exec-path-from-shell-initialize)
  (setq user-full-name    (concat (getenv "DEBFULLNAME"))
        user-mail-address (concat (getenv "DEBEMAIL")))
  (defconst my:d:password-store
    (if (getenv "PASSWORD_STORE_DIR")
        (expand-file-name (concat "Emacs/" (system-name))
                          (getenv "PASSWORD_STORE_DIR")) ""))
  )
  #+end_src
* 認証関連: =plstore=, =password-store= など
  :PROPERTIES:
  :CUSTOM_ID: org1a8b35da
  :END:
  - =leaf-plstore= で =plstore= が使えるようになったので,
    その設定をしておく.
  - =auth-password-store= で auth-source として =password-store= を使う.
  といった事をしている.
  #+begin_src emacs-lisp :tangle init.el
(leaf *authentication
  :if (and (getenv "GPG_KEY_ID")
           (file-directory-p my:d:password-store))
  :init
  (setq leaf-default-plstore
        (plstore-open
         (expand-file-name "plstore.plist" my:d:password-store)))
  (add-to-list 'vc-directory-exclusion-list
               (expand-file-name my:d:password-store))
  (leaf auth-source
    :custom
    `((auth-source-gpg-encrypt-to . '(getenv "GPG_KEY_ID"))
      ;; (auth-sources
      ;; . ,(expand-file-name "authinfo.gpg" my:d:password-store))
      )
    )
  (leaf password-store :ensure t)
  (leaf auth-source-pass :ensure t)
  (leaf plstore
    :custom
    `((plstore-secret-keys . 'silent)
      (plstore-encrypt-to  . ,(getenv "GPG_KEY_ID")))
    )
  )
  #+end_src
* 独自関数
  :PROPERTIES:
  :CUSTOM_ID: org34ff2306
  :END:
  細かい独自関数, など．
** ファイル名を minibuffer におさまる様に整形
   :PROPERTIES:
   :CUSTOM_ID: org452a76a8
   :END:
   zsh prompt風味．
   #+begin_src emacs-lisp :tangle init.el
;;;###autoload
(defun my:shorten-file-path (fpath max-length)
  "Show up to `max-length' characters of a directory name `fpath' like zsh"
  (let* ((path (reverse (split-string (abbreviate-file-name fpath) "/")))
         (output "")
         (top (mapconcat 'identity (reverse (last path 3)) "/"))
         (vmax (- max-length 4 (length top)))
         (path (butlast path 3))
         )
    (while (and path
                (and (< (length output) vmax)
                     (< (length (concat "/" (car path) output)) vmax)))
      (setq output (concat "/" (car path) output))
      (setq path (cdr path)))
    ;; 省略
    (when path
      (setq output (concat "/..." output)))
    (format "%s%s" top output)))
   #+end_src
** 空になったファイルを尋ねずに自動削除
   :PROPERTIES:
   :CUSTOM_ID: org5b521483
   :END:
   ゴミが残らないし, 地味に便利．
   #+begin_src emacs-lisp :tangle init.el
(leaf *delete-file-if-no-contents
  :preface
  (defun my:delete-file-if-no-contents ()
    (when (and (buffer-file-name (current-buffer))
               (= (point-min) (point-max)))
      (delete-file
       (buffer-file-name (current-buffer)))))
  :hook
  (after-save-hook . my:delete-file-if-no-contents)
  )
   #+end_src
** scratch を殺さない. 消したら再生成
   :PROPERTIES:
   :CUSTOM_ID: orge279b0e0
   :END:
   ...元ネタがどこだったのか忘れてしまった...
   #+begin_src emacs-lisp :tangle init.el
(leaf *keepscratchbuffer
  :preface
  (defun my:make-scratch (&optional arg)
    " *scratch* を作成して buffer-list に放り込む."
    (interactive)
    (progn
      (set-buffer (get-buffer-create "*scratch*"))
      (funcall initial-major-mode)
      (erase-buffer)
      (when (and initial-scratch-message (not inhibit-startup-message))
        (insert initial-scratch-message))
      (or arg
          (progn
            (setq arg 0)
            (switch-to-buffer "*scratch*")))
      (cond ((= arg 0) (message "*scratch* is cleared up."))
            ((= arg 1) (message "another *scratch* is created")))))
  (defun my:buffer-name-list ()
    "buffer 一覧の取得"
    (mapcar (function buffer-name) (buffer-list)))
  ;;
  :hook
  ((kill-buffer-query-functions
    . (lambda ()
        (if (string= "*scratch*" (buffer-name))
            (progn (my:make-scratch 0) nil)
          t)))
   (after-save-hook
    . (lambda ()
        (unless (member "*scratch*" (my:buffer-name-list))
          (my:make-scratch 1)))))
  )
   #+end_src
** SOMEDAY 行末の無駄な空白/改行を削除する [/]
   :PROPERTIES:
   :CUSTOM_ID: org1effd724
   :END:
   @see [[http://d.hatena.ne.jp/tototoshi/20101202/1291289625][無駄な行末の空白を削除する(Emacs Advent Calendar jp:2010)]]

   ただし, RD や Markdown だと空白行に意味があったりするので,
   必要に応じて拡張子で判断して外している．
   #+begin_src emacs-lisp :tangle init.el
(leaf *trailing-white-space
  :preface
  (defvar my:delete-trailing-whitespace-exclude-suffix
    (list "\\.rd$" "\\.md$" "\\.rbt$" "\\.rab$"))
  (defun my:delete-trailing-whitespace ()
    (interactive)
    (eval-when-compile (require 'cl-lib))
    (cond
     ((equal nil
             (cl-loop for pattern in my:delete-trailing-whitespace-exclude-suffix
                      thereis (string-match pattern buffer-file-name)))
      (delete-trailing-whitespace))))
  :hook
  (before-save-hook . my:delete-trailing-whitespace)
  )
   #+end_src
   - [ ] =cl 依存の書き換え?=
** ターミナルで =C-M-= を打つために
   :PROPERTIES:
   :CUSTOM_ID: org194b826d
   :END:
   詳細は
   [[https://superuser.com/questions/83166/using-c-m-to-do-a-query-replace-regexp-in-emacs-running-in-mac-terminal][Using C-M-% to do a query-replace-regexp in Emacs running in Mac terminal]]
   を参照のこと. terminal では =C-%= (つまり =Control-Shift-5= )が入力できない, という話.

   代わりに =C-x @= を =C-M-= に解釈させるように設定しておく.
   #+begin_src emacs-lisp :tangle init.el
; cargo cult adaptation of event-apply-control-modifier
(defun my:event-apply-control-meta-modifiers (ignore-prompt)
  (vector
   (event-apply-modifier (event-apply-modifier (read-event)
                                               'control 26 "C-")
                         'meta 27 "M-")))
(define-key function-key-map (kbd "C-x @") 'my:event-apply-control-meta-modifiers)
   #+end_src
* 言語の設定
  :PROPERTIES:
  :CUSTOM_ID: orgadf8c6bf
  :END:
  最近のEmacsはlocaleから文字コードを自動判別するらしいので,
  以前良く設定していた以下は不要らしいですね(ホントかな...?)。
  #+begin_src emacs-lisp :tangle no
(set-language-environment "Japanese")
(prefer-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-default 'buffer-file-coding-system 'utf-8)
  #+end_src
  なお, m17n.org の消滅によって上記設定に関する情報の参照元が消えた。
  適切な参照元はどこだろう...?
** cp5022x.el
   :PROPERTIES:
   :CUSTOM_ID: org58d8e6f8
   :END:
   Emacs23 から内部が Unicode ベースになっています。

   しかし文字コードの変換はGNU libcのiconvをベースにしているため,
   機種依存文字を含む文字コードの変換をうまく行なえません。
   そこで言語設定前に =cp5022x.el= をインストールすることにしています。
   #+begin_src emacs-lisp :tangle init.el
(leaf cp5022x
  :ensure t
  :require t
  :config
  (set-charset-priority 'ascii 'japanese-jisx0208 'latin-jisx0201
                        'katakana-jisx0201 'iso-8859-1 'unicode)
  (set-coding-system-priority 'utf-8 'euc-jp 'iso-2022-jp 'cp932)
  )
   #+end_src
* 主にEmacs本体, および同梱されている拡張に関する設定
  :PROPERTIES:
  :CUSTOM_ID: org1927da44
  :END:
** 終了時に =custom.el= を消す
   :PROPERTIES:
   :CUSTOM_ID: orgd140a191
   :END:
   設定ファイルに極力移す.
   #+begin_src emacs-lisp :tangle init.el
(leaf cus-edit
  :preface
  (setq custom-file (expand-file-name "custom.el" my:d:tmp))
  :custom
  `((custom-file . ,(expand-file-name "custom.el" my:d:tmp)))
  :hook
  `((kill-emacs-hook . (lambda ()
                         (if (file-exists-p custom-file)
                             (delete-file custom-file)))))
  )
   #+end_src
** =customize= で設定していたアレコレ
   :PROPERTIES:
   :CUSTOM_ID: orgaee31636
   :END:
   =custom.el= にある設定は極力こちらに移すようにしている.
   - 大抵の場合ターミナル内で =-nw= として起動するし,
     メニューは触ったことないので使わないので,
     フレーム, ツールバー等を非表示にする．
   - =.elc= と =.el= の timestamp を比較し, 新しい方を読み込む
    (=load-prefer-newer= は Emacs >= 24.4 から).
   - yes or no を y or n に
   他にもイロイロと. 設定が増えてきたら分ける.
   #+begin_src emacs-lisp :tangle init.el
(leaf cus-start
  :custom
  `(
    ;; 表示
    (ring-bell-function     . 'ignore)   ; ベル無効化
    ;; 編集
    (tab-width              . 4)    ;; tab 幅 4
    (indent-tabs-mode       . nil)  ;; tab ではインデントしない
    (fill-column            . 72)   ;; RFC2822 風味
    (truncate-lines         . nil)  ;; 折り返し無し
    (truncate-partial-width-windows . nil)
    (paragraph-start        . '"^\\([ 　・○<\t\n\f]\\|(?[0-9a-zA-Z]+)\\)")
    (auto-fill-mode         . nil)
    (next-line-add-newlines . nil)  ;; バッファ終端で newline を入れない
    (read-file-name-completion-ignore-case . t)  ; 大文字小文字区別無し
    (save-abbrevs           . 'silent)
    ;; backup
    (auto-save-list-file-prefix . ,(expand-file-name ".saves-" my:d:tmp))
    (auto-save-default       . t)
    (auto-save-timeout       . 15)
    (auto-save-interval      . 60)
    (make-backup-files       . t)
    (backup-by-copying       . t)  ;; symlink は使わない
    (backup-directory-alist  . '(("." . ,my:d:tmp)))
    (auto-save-file-name-transforms . '((".*" ,my:d:tmp t)))
    (version-control         . nil)
    (kept-new-versions       . 2)
    (kept-old-versions       . 2)
    (delete-old-versions     . t)
    (delete-auto-save-files  . t)
    ;; undo/redo - 数字に根拠無し
    (undo-limit              . 200000)
    (undo-strong-limit       . 260000)
    (history-length          . t)  ;; 無制限(の筈)
    ;; (save-silently           . t)
    ;;
    (safe-local-variable-values
     . '((org-link-file-path-type . absolute)))
    )
  :config
  (when (boundp 'load-prefer-newer)
    (setq load-prefer-newer t))
  ;; yes or no を y or n に
  (fset 'yes-or-no-p 'y-or-n-p)
  )
  #+end_src
** =startup=: 起動は静かに
   :PROPERTIES:
   :CUSTOM_ID: org9eac26e0
   :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf startup
  :custom
  ((inhibit-startup-screen            . t)
   (inhibit-startup-message           . t)
   (inhibit-startup-echo-area-message . t)
   (initial-scratch-message           . nil)
   )
  )
  #+end_src
** =hl-mode=: 現在行のハイライト
   :PROPERTIES:
   :CUSTOM_ID: org58ba514c
   :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf hl-line
  :hook
  (emacs-startup-hook . global-hl-line-mode)
  )
  #+end_src
** 選択リージョンに色付け
   :PROPERTIES:
   :CUSTOM_ID: orgd5c20561
   :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf simple
  :hook
  (emacs-startup-hook . transient-mark-mode)
  )
  #+end_src
** =show-paren-mode=: 対応する括弧を強調表示
   :PROPERTIES:
   :CUSTOM_ID: org281c29f0
   :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf paren
  :custom
  ((show-paren-style  . 'mixed))
  :hook
  (emacs-startup-hook . show-paren-mode)
  )
  #+end_src
** =linum-mode= : 行番号表示
   :PROPERTIES:
   :CUSTOM_ID: orgdd3a7c08
   :END:
   必要に応じて有効にするので, 基本使わない.
   通常はモードラインに行番号や桁番号を表示しないようする.
   ついでに =linum-mode= を有効にした場合の桁表示を 5 桁に.
  #+begin_src emacs-lisp :tangle init.el
(leaf line-number-mode
  :custom
  ((linum-format     . "%5d ")
   (line-number-mode . nil))
  )
  #+end_src
** byte-compile 関連
   :PROPERTIES:
   :CUSTOM_ID: org45fe96c0
   :END:
  - debug は表示しない: 必要に応じて t に変更する
  - Compile-Log の非表示: ほとんど見ないし．
  - Warning の抑制: これもほとんど見ないし．
  他にも増えそうだが
  #+begin_src emacs-lisp :tangle init.el
(eval-and-compile
  (leaf bytecomp
    :custom
    ((byte-compile-warnings . '(not
                                obsolete
                                free-vars
                                unresolved
                                callargs
                                redefine
                                noruntime
                                cl-functions
                                interactive-only
                                make-local))
     (debug-on-error        . nil))
    :config
    (let ((win (get-buffer-window "*Compile-Log*")))
      (when win (delete-window win)))
    )
  )
  #+end_src
** =autorevert=: ファイルが変更されたら再読み込み
   :PROPERTIES:
   :CUSTOM_ID: org41afd6b6
   :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf autorevert
  :custom
  ((auto-revert-interval . 0.1))
  :hook
  (emacs-startup-hook . global-auto-revert-mode)
  )
  #+end_src
** =savehist=: 変更履歴を保存
   :PROPERTIES:
   :CUSTOM_ID: org246148ce
   :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf savehist
  :custom
  `((savehist-file
     . ,(expand-file-name "history" my:d:tmp)))
  :hook
  ((after-init-hook . savehist-mode))
  )
  #+end_src
** ファイル, デイレクトリ整理
   :PROPERTIES:
   :CUSTOM_ID: org35f3de20
   :END:
   =~/.emacs.d/= 以下にファイルが転がるのがなんか嫌なので,
   気がつく度に設定している.
   #+begin_src emacs-lisp :tangle init.el
(leaf *change-default-file-location
  :custom
  `(;; url
    (url-configuration-directory
     . ,(expand-file-name "url" my:d:tmp))
    ;; nsm
    (nsm-settings-file
     . ,(expand-file-name "nsm.data" my:d:tmp ))
    ;; bookmark
    (bookmark-default-file
     . ,(expand-file-name "bookmarks" my:d:share))
    ;; eshell
    (eshell-directory-name
     . ,(expand-file-name "eshell" my:d:tmp))
    )
  )
   #+end_src
   他にもイロイロありそう．
   =bookmark= はちゃんと使いこなしたい所ではあるが．
** =eldoc=: emacs-lisp document
   :PROPERTIES:
   :CUSTOM_ID: org6a5a84f9
   :END:
   minibuffer では eldoc にお黙り頂く。
   #+begin_src emacs-lisp :tangle init.el
(leaf eldoc
  :hook (emacs-lisp-mode-hook . turn-on-eldoc-mode)
  :blackout t
  :preface
  (defun my:shutup-eldoc-message (f &optional string)
    (unless (active-minibuffer-window)
      (funcall f string)))
  :advice
  (:around eldoc-message
           my:shutup-eldoc-message)
  )
   #+end_src
** =midnight=: 一定期間使用しなかった buffer を自動削除
   :PROPERTIES:
   :CUSTOM_ID: org2157dacb
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf midnight
  :custom
  ((clean-buffer-list-delay-general . 1))
  :hook
  (emacs-startup-hook . midnight-mode))
   #+end_src
** =uniquify=: モードラインのファイル名にディレクトリも表示する
   :PROPERTIES:
   :CUSTOM_ID: org9a0cf611
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf uniquify
  :custom
  ((uniquify-buffer-name-style . 'post-forward-angle-brackets)
   (uniquify-min-dir-content   . 1))
  )
   #+end_src
** =whitespace=: 空白の強調表示
   :PROPERTIES:
   :CUSTOM_ID: org68c5e01b
   :END:
   背景も変えようかなぁ...
   #+begin_src emacs-lisp :tangle init.el
(leaf whitespace
  :blackout ((global-whitespace-mode . "")
             (whitespace-mode        . ""))
  :hook (after-init-hook . global-whitespace-mode)
  :custom
  ((whitespace-line-column      . 72)
   (whitespace-style
    . '(face        ; faceを使う
        trailing    ; 行末の空白を対象.
        tabs        ; tab
        spaces      ; space
        ))
   (whitespace-display-mappings . '((space-mark ?\u3000 [?\□])
                                    (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t])))
   (whitespace-space-regexp     . "\\(\u3000+\\)")
   (whitespace-global-modes     . '(not eww-mode
                                        term-mode
                                        eshell-mode
                                        org-agenda-mode
                                        calendar-mode))
   )
  )
   #+end_src
** =saveplace=: 前回の修正位置を記憶する.
   :PROPERTIES:
   :CUSTOM_ID: org285d3b12
   :END:
   記憶の保存先を =~/.emacs.d/tmp/emacs-places= に変更.
   #+begin_src emacs-lisp :tangle init.el
(leaf save-place
  :custom
  `((save-place . t)
    (save-place-file
     . ,(expand-file-name "emacs-places"  my:d:tmp))
    )
  :hook (emacs-startup-hook . save-place-mode)
  :config
  (setq save-place-ingore-files-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                save-place-ignore-files-regexp
                tramp-file-name-regexp))
  )
   #+end_src
** =time-stamp=: 保存時に timestamp を自動更新
   :PROPERTIES:
   :CUSTOM_ID: orgd064b693
   :END:
   デフォルトではいろいろと衝突したので
   更新文字列を変更し,  =＄Lastupdate: 2= (＄は半角) があったら
   timestamp を更新する様にした．
   #+begin_src emacs-lisp :tangle init.el
(leaf time-stamp
  :hook (before-save-hook . time-stamp)
  :custom
  ((time-stamp-active     . t)
   (time-stamp-line-limit . 10)
   (time-stamp-start      . "$Lastupdate: 2")
   (time-stamp-end        . "\\$")
   (time-stamp-format     . "%Y-%02m-%02d %02H:%02M:%02S")
   )
  )
   #+end_src
   モード独自の設定(例えば Org とか)に関しては別途．
** =tramp=: ssh 越しにファイルを編集
   :PROPERTIES:
   :CUSTOM_ID: org04853162
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf tramp
  :preface
  (setq tramp-persistency-file-name (expand-file-name "tramp" my:d:tmp))
  :custom
  `((tramp-persistency-file-name
     . ,(expand-file-name "tramp" my:d:tmp))
    (tramp-completion-reread-directory-timeout . nil)
    )
  :hook
  (kill-emacs-hook
   . (lambda ()
       (if (file-exists-p tramp-persistency-file-name)
           (delete-file tramp-persistency-file-name))))
  )
   #+end_src
** =browse-url=
   :PROPERTIES:
   :CUSTOM_ID: org456d3821
   :END:
   ブラウザ呼び出しは =xdg-open/open= に丸投げ.
   #+begin_src emacs-lisp :tangle init.el

(leaf browse-url
  :require t
  :bind ("C-c C-j" . browse-url-at-point)
  :defer-config
  (cond ((executable-find "xdg-open")
         (setq browse-url-browser-function 'browse-url-xdg-open
               browse-url-secondary-browser-function 'browse-url-xdg-open))
        ((eq system-type 'darwin)
         (setq browse-url-browser-function 'browse-url-default-macosx-browser
               browse-url-secondary-browser-function 'browse-url-default-macosx-browser))
        (t
         ;; (setq browse-url-browser-function 'w3m-browse-url)
         (setq browse-url-browser-function 'eww-browse-url)
         ))
  )
   #+end_src
** =server=: Emacs server
   :PROPERTIES:
   :CUSTOM_ID: org931fd3cc
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf server
  :commands (server-running-p)
  :init
  (defun my:new-client-frame ()
    "Create new GUI emacsclient"
    (interactive)
    (make-frame-on-display (getenv "DISPLAY")))
  :hook
  (emacs-startup-hook . (lambda ()
                          (unless (server-running-p)
                            (server-start))))
  )
   #+end_src
** buffer の印刷
   :PROPERTIES:
   :CUSTOM_ID: orgdd48e2df
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf ps-mule
  :custom
  ((ps-multibyte-buffer . 'non-latin-printer))
  :config
  (defalias 'ps-mule-header-string-charset 'ignore)
  )
   #+end_src
** =tab-bar-mode=: Emacsの「tab」
   :PROPERTIES:
   :CUSTOM_ID: orgcc9538d1
   :END:
   Emacs27から同梱された =tab-bar-mode= に elscreen から乗り換えた.
   手癖で "C-o" を prefix で使いたいので, その設定をしていたり.
   #+begin_src emacs-lisp :tangle init.el
(leaf tab-bar-mode
  :init
  (defvar my:ctrl-o-map (make-sparse-keymap)
    "My original keymap binded to C-o.")
  (defalias 'my:ctrl-o-prefix my:ctrl-o-map)
  (define-key global-map (kbd "C-o") 'my:ctrl-o-prefix)
  (define-key my:ctrl-o-map (kbd "c")   'tab-new)
  (define-key my:ctrl-o-map (kbd "C-c") 'tab-new)
  (define-key my:ctrl-o-map (kbd "k")   'tab-close)
  (define-key my:ctrl-o-map (kbd "C-k") 'tab-close)
  (define-key my:ctrl-o-map (kbd "n")   'tab-next)
  (define-key my:ctrl-o-map (kbd "C-n") 'tab-next)
  (define-key my:ctrl-o-map (kbd "p")   'tab-previous)
  (define-key my:ctrl-o-map (kbd "C-p") 'tab-previous)
  ;;
  (defun my:tab-bar-tab-name-truncated ()
    "Custom: Generate tab name from the buffer of the selected window."
    (let ((tab-name (buffer-name (window-buffer (minibuffer-selected-window))))
          (ellipsis (cond
                     (tab-bar-tab-name-ellipsis)
                     ((char-displayable-p ?…) "…")
                     ("..."))))
      (if (< (length tab-name) tab-bar-tab-name-truncated-max)
          (format "%-12s" tab-name)
        (propertize (truncate-string-to-width
                     tab-name tab-bar-tab-name-truncated-max nil nil
                     ellipsis)
                    'help-echo tab-name))))
  :custom
  ((tab-bar-close-button-show      . nil)
   (tab-bar-close-last-tab-choice  . nil)
   (tab-bar-close-tab-select       . 'left)
   (tab-bar-history-mode           . nil)
   (tab-bar-new-tab-choice         . "*scratch*")
   (tab-bar-new-button-show        . nil)
   (tab-bar-tab-name-function      . 'my:tab-bar-tab-name-truncated)
   (tab-bar-tab-name-truncated-max . 12)
   (tab-bar-separator              . "")
   )
  :config
  (tab-bar-mode +1)
  )
   #+end_src
  - [[https://masutaka.net/chalow/2011-09-28-1.html][ターミナルの zsh と Emacs を風のように駆け抜ける！]]
* =beacon=: buffer 切り替え時の行の強調表示
  :PROPERTIES:
  :CUSTOM_ID: orgb750c5b3
  :END:
  #+begin_src emacs-lisp
(leaf beacon
  :ensure t
  :disabled t
  :custom
  `((beacon-color              . "#aa3400")
    ;; (beacon-size               . 64)
    (beacon-blink-when-focused . t)
    )
  :custom-face
  `((beacon-fallback-background . '((t (:background "#556b2f")))))
  :config
  (beacon-mode 1)
  )
  #+end_src
* =recentf=: 最近使ったファイル履歴の保管
  :PROPERTIES:
  :CUSTOM_ID: org43970469
  :END:
  結局履歴を貯める設定をしている事になっている.
  ディレクトリの履歴も取れるので recentf-ext を入れておく
  #+begin_src emacs-lisp :tangle init.el
(leaf recentf
  :defun
  (recentf-save-list recentf-cleanup)
  :preface
  (leaf shut-up
    :ensure t
    :init
    (defvar shut-up-ignore t))
  ;;
  (defun my:recentf-save-list-silence ()
    "Shut up"
    (interactive)
    (let ((message-log-max nil))
      (shut-up (recentf-save-list)))
    (message ""))
  ;;
  (defun my:recentf-cleanup-silence ()
    "Shut up"
    (interactive)
    (let ((message-log-max nil))
      (shut-up (recentf-cleanup)))
    (message ""))
  ;;
  :init
  (leaf recentf-ext :ensure t)
  :hook
  ((after-init-hook . recentf-mode)
   (focus-out-hook  . my:recentf-save-list-silence)
   (focus-out-hook  . my:recentf-cleanup-silence))
  :custom
  `((recentf-save-file       . ,(expand-file-name "recentf" my:d:tmp))
    (recentf-max-saved-items . 2000)
    (recentf-auto-cleanup    . 'never)
    (recentf-exclude         . '(".recentf"
                                 "^/tmp\\.*"
                                 "^/private\\.*"
                                 "^/var/folders\\.*"
                                 "/TAGS$"
                                 "\\.*草稿\\.*"
                                 "^#\\.*"
                                 "^/home/uwabami/.mozilla/\\.*"
                                 "^/home/uwabami/.emacs.d/tmp/\\.*"
                                 "^/home/uwabami/.dotfiles/Emacs/tmp/\\.*"
                                 "^/[^/:]+:"
                                 "bookmarks"
                                 "org-recent-headings.dat"
                                 "^/mnt/c/\\.*"
                                 "\\.*COMMIT_EDITMSG$"
                                 ".*-autoloads.el$"
                                 "^/home/uwabami/.emacs.d/pkg/\\.*"
                                 )))
  )
  #+end_src
* =all-the-icons-in-terminal=: ターミナルでもicon fontを使いたい。
  :PROPERTIES:
  :CUSTOM_ID: orgd903bf1d
  :END:
  [[https://github.com/domtronn/all-the-icons.el][all-the-icons.el]]のデータを修正して,
  [[https://github.com/sebastiencs/icons-in-terminal][icons in terminal]]を修正した
  自作フォントのデータを読みに行くようにしてみました。
  #+begin_src emacs-lisp :tangle init.el
(leaf all-the-icons
  :ensure t
  :init (leaf memoize :ensure t)
  :require t
  :custom
  ((all-the-icons-scale-factor   . 0.9)
   (all-the-icons-default-adjust . 0.0))
  )
(leaf all-the-icons-in-terminal
  :el-get (all-the-icons-in-terminal
           :type github
           :pkgname "uwabami/isfit-plus")
  :after all-the-icons
  :require t
  :config
  (add-to-list 'all-the-icons-mode-icon-alist
               '(f90-mode all-the-icons-faicon "facebook")) ;; facebook!?
  (add-to-list 'all-the-icons-mode-icon-alist
               '(wl-folder-mode all-the-icons-faicon "folder-o" ))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(wl-summary-mode all-the-icons-faicon "folder-open-o"))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(wl-draft-mode all-the-icons-material "drafts"))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(mime-view-mode all-the-icons-faicon "envelope-o"))
  )
  #+end_src
** SOMEDAY East Asian Ambiguos 対応 [0/1]
   :PROPERTIES:
   :CUSTOM_ID: orgd3ca00ac
   :END:
   East Asian Ambiguosを2文字幅にして, ついでに
   CJK 以外の East Asian Ambiguosと絵文字も2文字幅にするようにしています。
   拙作の修正ロケールはこちら: [[https://github.com/uwabami/locale-eaw-emoji]]
   #+begin_src emacs-lisp :tangle init.el
(leaf locale-eaw-emoji
  :el-get uwabami/locale-eaw-emoji
  :after all-the-icons-in-terminal
  :require t
  :config
  ;; (eaw-half-emoji-fullwidth)
  (eaw-and-emoji-fullwidth)
  )
   #+end_src
   - [ ] 最近, EAWは一文字幅強制の方が良いかなぁ, とか悩み中.
** macOS対応
   :PROPERTIES:
   :CUSTOM_ID: orgcf967538
   :END:
   最近良く触る様になったので設定している。
   +まあ, イマイチ慣れない訳ですけれど+
   #+begin_src emacs-lisp :tangle init.el
(leaf *mac-encoding
  :if (eq system-type 'darwin)
  (leaf ucs-normalize
    :require t
    :defvar (mac-pass-control-to-system ns-command-modifier ns-alternate-modifier)
    :config
    (set-file-name-coding-system 'utf-8-hfs)
    (setq locale-coding-system 'utf-8-hfs)
    (setq mac-pass-control-to-system t  ;; Ctrl を Mac から奪い取る
          ns-command-modifier 'meta     ;; Cmd と Option を逆にする
          ns-alternate-modifier 'super)
    (global-set-key [ns-drag-file] 'ns-find-file)
    )
  )
   #+end_src
** Windows(WSL2)対応
   :PROPERTIES:
   :CUSTOM_ID: org3416eeb2
   :END:
   #+begin_src emacs-lisp
(leaf *wsl2-path
  :if (getenv "WSL_DISTRO_NAME")
  :preface
  (defun set-drvfs-alist ()
    (interactive)
    (setq drvfs-alist
          (mapcar
           (lambda (x)
             (when (string-match "\\(.*\\)|\\(.*?\\)/?$" x)
               (cons (match-string 1 x) (match-string 2 x))))
           (split-string (concat
                          ;; //wsl$ パス情報の追加
                          (when (or (not (string-match "Microsoft" (shell-command-to-string "uname -v")))
                                    (>= (string-to-number (nth 1 (split-string operating-system-release "-"))) 18362))
                            (concat "/|" (shell-command-to-string "wslpath -m /")))
                          (shell-command-to-string
                           "mount | grep -E ' type (9p|drvfs) ' | grep -v '^tools on /init type 9p' | sed -r 's/(.*) on (.*) type (9p|drvfs) .*/\\2\\|\\1/' | sed 's!\\\\!/!g'"))
                         "\n" t))))
  ;;
  (defconst windows-path-style-regexp "\\`\\(.*/\\)?\\([a-zA-Z]:\\\\.*\\|[a-zA-Z]:/.*\\|\\\\\\\\.*\\|//.*\\)")
  ;;
  (defun windows-path-convert-file-name (name)
    (setq name (replace-regexp-in-string windows-path-style-regexp "\\2" name t nil))
    (setq name (replace-regexp-in-string "\\\\" "/" name))
    (let ((case-fold-search t))
      (cl-loop for (mountpoint . source) in drvfs-alist
               if (string-match (concat "^\\(" (regexp-quote source) "\\)\\($\\|/\\)") name)
               return (replace-regexp-in-string "^//" "/" (replace-match mountpoint t t name 1))
               finally return name)))
  ;;
  (defun windows-path-run-real-handler (operation args)
    "Run OPERATION with ARGS."
    (let ((inhibit-file-name-handlers
           (cons 'windows-path-map-drive-hook-function
                 (and (eq inhibit-file-name-operation operation)
                      inhibit-file-name-handlers)))
          (inhibit-file-name-operation operation))
      (apply operation args)))
  ;;
  (defun windows-path-map-drive-hook-function (operation name &rest args)
    "Run OPERATION on cygwin NAME with ARGS."
    (windows-path-run-real-handler
     operation
     (cons (windows-path-convert-file-name name)
           (if (stringp (car args))
               (cons (windows-path-convert-file-name (car args))
                     (cdr args))
             args))))
  :hook
  (after-init-hook
   . (lambda ()
       (progn
         (set-drvfs-alist)
         (add-to-list 'my:saved-file-name-handler-alist
                      (cons windows-path-style-regexp
                            'windows-path-map-drive-hook-function)))))
  )
   #+end_src
* カレンダー設定
  :PROPERTIES:
  :CUSTOM_ID: org7d9d4027
  :END:
   表示の更新と =japanese-holidays= による日本の休日の追加
   #+begin_src emacs-lisp :tangle init.el
(leaf calendar
  :custom
  (;; 祝日をカレンダーに表示
   (mark-holidays-in-calendar . t)
   ;; 月と曜日の表示調整
   (calendar-month-name-array . ["01" "02" "03" "04" "05" "06"
                                 "07" "08" "09" "10" "11" "12" ])
   (calendar-day-name-array   . ["日" "月" "火" "水" "木" "金" "土"])
   (calendar-day-header-array . ["日" "月" "火" "水" "木" "金" "土"])
   ;; 日曜開始
   (calendar-week-start-day   . 0))
  :config
  (with-eval-after-load 'calendar
    (leaf japanese-holidays
      :ensure t
      :custom
      ((japanese-holiday-weekend         . '(0 6))
       (japanese-holiday-weekend-marker  . '(holiday  ;; 日
                                             nil      ;; 月
                                             nil      ;; 火
                                             nil      ;; 水
                                             nil      ;; 木
                                             nil      ;; 金
                                             japanese-holiday-saturday)))
      :hook
      ((calendar-today-visible-hook   . japanese-holiday-mark-weekend)
       (calendar-today-invisible-hook . japanese-holiday-mark-weekend)
       (calendar-today-visible-hook   . calendar-mark-today))
      :config
      (setq calendar-holidays (append japanese-holidays))
      )
    )
  )
   #+end_src
* キーバインドの設定
  :PROPERTIES:
  :CUSTOM_ID: org8aa6f45e
  :END:
  既に手癖になってしまっているアレコレ．
  特に =[home]= と =[end]= は無いと途方に暮れます．
  #+begin_src emacs-lisp :tangle init.el
(leaf-keys (("C-h"     . backward-delete-char)
            ("C-c M-a" . align-regexp)
            ("C-c ;"   . comment-region)
            ("C-c M-;" . uncomment-region)
            ("C-/"     . undo)
            ("C-c M-r" . replace-regexp)
            ("C-c r"   . replace-string)
            ("<home>"  . beginning-of-buffer)
            ("<end>"   . end-of-buffer)
            ("C-c M-l" . toggle-truncate-lines)))
  #+end_src
* =migemo=: インクリメンタル検索
  :PROPERTIES:
  :CUSTOM_ID: org5d9ade19
  :END:
  無いと途方に暮れる．
  #+begin_src emacs-lisp :tangle init.el
(leaf migemo
  :if (executable-find "cmigemo")
  :ensure t
  :require t
  :custom
  '((migemo-user-dictionary  . nil)
    (migemo-regex-dictionary . nil)
    (migemo-options          . '("-q" "--emacs"))
    (migemo-command          . "cmigemo")
    (migemo-coding-system    . 'utf-8-unix))
  :init
  (cond
   ((and (eq system-type 'darwin)
         (file-directory-p "/usr/local/share/migemo/utf-8/"))
    (setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict"))
   (t
    (setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict")))
  :config
  (migemo-init)
  )
  #+end_src
* =emacs-w3m=:
  :PROPERTIES:
  :CUSTOM_ID: org2d69d5ee
  :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf emacs-w3m
  :if (executable-find "w3m")
  :el-get (emacs-w3m
           :type github
           :pkgname "emacs-w3m/emacs-w3m"
           :build `(("autoconf")
                    ("./configure" ,(format "--with-emacs=%s" el-get-emacs))
                    ("make"))
           :info "doc")
  :load-path
  `(,(expand-file-name "emacs-w3m/shimbun" my:d:pkg:elget))
  )
  #+end_src
* SOMEDAY =eww=: 内蔵ブラウザ [0/3]
  :PROPERTIES:
  :CUSTOM_ID: org35bd4bc4
  :END:
  リンクを簡単に辿る(Hit-a-Hint) のために =ace-link= も入れておく
   #+begin_src emacs-lisp :tangle init.el
(leaf eww
  :preface
  (unless (file-directory-p (expand-file-name "eww" my:d:tmp))
    (make-directory (expand-file-name "eww" my:d:tmp)))
  :init
  (leaf ace-link :ensure t)
  (leaf addressbar
    :el-get (addressbar
             :type github
             :pkgname "lurdan/emacs-addressbar")
    :custom
    `((addressbar-persistent-history-directory
       . ,(expand-file-name my:d:tmp))
      (addressbar-ignore-url-regexp
       . "\\(://duckduckgo\\.com/\\|google\\.com/search\\)")
      (addressbar-search-command-alist
       .  '("g" . "https://google.com/search?&gws_rd=cr&complete=0&pws=0&tbs=li:1&q="))
      (addressbar-display-url-max-length . 60)
      ))
  (leaf shr
    :custom
    ((shr-use-colors    . nil)
     (shr-use-fonts     . nil)
     (shr-image-animate . nil)
     (shr-width         . 72))
    )
  :bind (("<f2>" . eww)
         (:eww-mode-map
          ("r"   . eww-reload)
          ("o"   . eww)
          ("&"   . eww-browse-with-external-browser)
          ("b"   . eww-back-url)
          ("]"   . eww-next-url)
          ("["   . eww-previous-url)
          ("g"   . eww-top-url)
          ("+"   . my:eww-increase-width)
          ("-"   . my:eww-decrease-width)
          ("h"   . backward-char)
          ("j"   . next-line)
          ("k"   . previous-line)
          ("l"   . forward-char)
          ("/"   . isearch-forward)
          ("?"   . isearch-backward)
          ("n"   . isearch-next)
          ("N"   . isearch-previous)
          ("f"   . ace-link-eww))
         )
  :custom
  `((eww-bookmarks-directory
     . ,(expand-file-name "eww" my:d:tmp))
    (eww-search-prefix
     . "https://www.google.com/search?&gws_rd=cr&complete=0&pws=0&tbs=li:1&q="))
  :config
  (ace-link-setup-default)
  ;; :init
  ;; ;;
  ;; (defun eww-disable-images ()
  ;;   "ewwで画像表示させない"
  ;;   (interactive)
  ;;   (setq-local shr-put-image-function 'shr-put-image-alt)
  ;;   (eww-reload))
  ;; ;;
  ;; (defun eww-enable-images ()
  ;;   "ewwで画像表示させる"
  ;;   (interactive)
  ;;   (setq-local shr-put-image-function 'shr-put-image)
  ;;   (eww-reload))
  ;; (defun shr-put-image-alt (spec alt &optional flags)
  ;;   (insert alt))
  ;; ;;
  ;; ;;
  ;; (defun eww-mode-hook--disable-image ()
  ;;   (setq-local shr-put-image-function 'shr-put-image-alt))
  ;; (add-hook 'eww-mode-hook 'eww-mode-hook--disable-image)
  )
   #+end_src
   - [ ] 背景色の指定
   - [ ] 幅の強制
* 日本語入力: =ddskk=
  :PROPERTIES:
  :CUSTOM_ID: orgb83f65a0
  :END:
  [[http://openlab.ring.gr.jp/skk/ddskk-ja.html][Daredevil SKK (DDSKK)]] をメインで使用中．無いと途方に暮れる．
  ちなみにGTKが有効になっていると =gtk-immodule= なんかと衝突するので
  =~/.Xresources= で xim を無効にしておくと良い．
  例えば以下の様に:
  #+begin_src conf :tangle no
! disable XIM
Emacs*useXIM: false
  #+end_src
** Emacs 本体側の設定(ddskk)
   :PROPERTIES:
   :CUSTOM_ID: orgeaefbd62
   :END:
   実際の設定は別ファイルで行なわれるため
   ここでは設定ファイルの位置変更を変更している．
   #+begin_src emacs-lisp :tangle init.el
(defvar skk-user-directory (concat my:d:tmp "skk"))
(unless (file-directory-p skk-user-directory)
  (make-directory skk-user-directory))
(unless (locate-library "skk")
  (package-install 'ddskk t))
(leaf skk
  :commands skk-make-indicator-alist
  :bind (("C-x j"   . skk-mode)
         ("C-x C-j" . skk-mode)
         ("C-\\"    . skk-mode))
  :init
  (setq skk-init-file (concat user-emacs-directory "init-ddskk")
        default-input-method "japanese-skk" )
  )
   #+end_src
** DDSKK 本体の設定
   :PROPERTIES:
   :CUSTOM_ID: org03d84f47
   :END:
*** 基本動作
    :PROPERTIES:
    :CUSTOM_ID: orgab495f21
    :END:
    byte-compile の為の読み込み
#+begin_src emacs-lisp :tangle init-ddskk.el
(eval-when-compile (require 'skk))
#+end_src
    sticky shift: [[http://homepage1.nifty.com/blankspace/emacs/sticky.html][sticky shift]] を参照のこと.
    ddskk の 14.2 以降から同梱されるようになった(ありがたい)
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-sticky-key ";")
    #+end_src
    変換候補の表示位置
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-show-candidates-always-pop-to-buffer nil)
    #+end_src
    候補表示件数を2列に
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-henkan-number-to-display-candidates 5)
    #+end_src
    日本語表示しない
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-japanese-message-and-error nil)
    #+end_src
    メニューを日本語にしない -> toolbar 非表示だし.
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-show-japanese-menu nil)
    #+end_src
    注釈の表示
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-show-annotation nil)
    #+end_src
    インジケータの表示のカスタマイズ
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-latin-mode-string "[_A]")
(setq skk-hiragana-mode-string "[あ]")
(setq skk-katakana-mode-string "[ア]")
(setq skk-jisx0208-latin-mode-string "[Ａ]")
(setq skk-jisx0201-mode-string "[_ｱ]")
(setq skk-abbrev-mode-string "[aA]")
(setq skk-indicator-use-cursor-color nil)
    #+end_src
    インジケータを左端に表示
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-status-indicator 'left)
    #+end_src
    mode-line が動くのが許せないので, ちょっと修正
    #+begin_src emacs-lisp :tangle init-ddskk.el
(defadvice skk-make-indicator-alist
    (after my:set-skk-default-indicator activate)
  (dolist (elem
           '((abbrev " [aA]" . "--[aA]:")
             (latin " [_A]" . "--[_A]:")
             (default " [--]" . "--[--]:"))
           )
    (setq ad-return-value
          (append (cons elem nil)
                  (delq (assoc (car elem) ad-return-value) ad-return-value)))))
;;
;;(setq skk-show-inline t)
    #+end_src
    カーソルには色をつけない
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-use-color-cursor nil)
    #+end_src
    キーバインド
    #+begin_src emacs-lisp :tangle init-ddskk.el
(global-set-key "\C-x\C-j" 'skk-mode)
(global-set-key "\C-xj" 'skk-mode)
(global-set-key "\C-j" 'skk-mode)
(global-set-key "\C-\\" 'skk-mode)
    #+end_src
    半角カナを入力
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-use-jisx0201-input-method t)
    #+end_src
    Enter で改行しない
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-egg-like-newline t)
    #+end_src
    "「"を入力したら"」"も自動で挿入
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-auto-insert-paren t)
    #+end_src
    句読点変換ルール
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-kuten-touten-alist
      '(
        (jp    . ("。" . "、"))
        (jp-en . ("。" . ", "))
        (en-jp . ("．" . "，"))
        (en    . (". " . ", "))
        ))
(setq-default skk-kutouten-type 'en)
    #+end_src
    全角記号の変換: @ での日付入力は使わない
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-rom-kana-rule-list
      (append skk-rom-kana-rule-list
              '(("!" nil "!")
                (":" nil ":")
                (";" nil ";")
                ("?" nil "?")
                ("z " nil "　")
                ("\\" nil "\\")
                ("@" nil "@")
                )))
    #+end_src
    送り仮名が厳密に正しい候補を優先
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-henkan-strict-okuri-precedence t)
    #+end_src
    辞書の共有
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-share-private-jisyo t)
    #+end_src
    変換候補を縦に表示
    #+begin_src emacs-lisp :tangle init-ddskk.el
;; (setq skk-show-inline 'vertical)
(setq skk-show-inline nil)
    #+end_src
*** 辞書の設定
    :PROPERTIES:
    :CUSTOM_ID: orgb6cec722
    :END:
    追加している辞書の一覧は
    - [[http://www.chibutsu.org/jisho/][地球物理辞書]]
    - [[http://www.geocities.jp/living_with_plasma/tanudic.html][天文・天体物理用語の漢字変換用辞書]]
    - はてなキーワード
    - [[http://matsucon.net/material/dic/][2ちゃんねる顔文字辞書 MatsuCon]]
    - [[http://matsucon.net/][MatsuCon]]
    といった所.
    はてなキーワードからの辞書の抽出は [[http://d.hatena.ne.jp/znz][znz]] さんの
    - [[http://rubyist.g.hatena.ne.jp/znz/20060924/p1][「はてなダイアリーキーワードふりがなリスト」を SKK の辞書に変換]]
    を参考に.
    [[http://matsucon.net/][MatsuCon]] で公開されている顔文字に関しては
    顔文字に ; や が含まれている場合に, 適宜quoteする必要があるので
    以下のスクリプトで適当に変換.
    #+begin_src ruby :tangle no
#!/usr/bin/env ruby
require 'nkf'
src = ARGV[0]
if ARGV.size < 1
  puts "usage: ime2skk.rb ime_dictionary"
  exit 0
end
File.open(src, "r") {|f|
  f.each do |line|
    line_euc = NKF.nkf("-S -e",line)
    if line_euc =~ /^([^!]+?)\t(.+?)\t.+$/
      entry = $1
      content = $2
      if content =~/;/
        puts entry + " /(concat \"" + content.gsub(';','\\\\073') + "\")/"
      elsif content =~/\//
        puts entry + " /(concat \"" + content.gsub('/','\\\\057') + "\")/"
      else
        puts entry + " /" + content + "/"
      end
    end
  end
}
    #+end_src
    他にも quote する必要あるような気もするけれど, それは気がついた時に.

    辞書サーバがそもそも UTF-8 を扱えれば良いのだけれども.
    辞書サーバの指定は以下.
    #+begin_src emacs-lisp :tangle init-ddskk.el
(cond
 ((getenv "SKKSERVER")
  (setq skk-server-host (getenv "SKKSERVER")
        skk-server-portnum "1178"
        skk-large-jisyo nil)
  (add-to-list 'skk-search-prog-list
               '(skk-server-completion-search) t)
  (add-to-list 'skk-search-prog-list
               '(skk-comp-by-server-completion) t))
 (t
  (setq skk-get-jisyo-directory (concat my:d:tmp "skk-jisyo")
        skk-large-jisyo (concat skk-get-jisyo-directory "/SKK-JISYO.L")))
 )
(when (file-exists-p "/usr/local/share/skkdic/SKK-JISYO.emoji.utf8")
  (setq skk-extra-jisyo-file-list
        (list '("/usr/local/share/skkdic/SKK-JISYO.emoji.utf8" . utf-8))))
    #+end_src
    辞書登録の際に送り仮名を削除
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-check-okurigana-on-touroku 'auto)
    #+end_src
    漢字登録のミスをチェックする
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-check-okurigana-on-touroku t)
    #+end_src
    個人辞書の文字コード
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-jisyo-code 'utf-8-unix)
    #+END_SRC
*** インクリメンタルサーチ
    :PROPERTIES:
    :CUSTOM_ID: org0cbdad2e
    :END:
    minibuffer 内では強制的に skk off.
    インクリメンタルサーチは migemo に任せることに．
    #+begin_src emacs-lisp :tangle init-ddskk.el
(add-hook 'skk-mode-hook
          (lambda ()
            (and (skk-in-minibuffer-p)
                 (skk-mode-exit))))
(setq skk-isearch-start-mode 'latin)
    #+end_src
* 校正, 辞書等
  :PROPERTIES:
  :CUSTOM_ID: org15a06190
  :END:
** =redpen-paragraph=: [[http://redpen.cc/][redpen]] による文章校正
   :PROPERTIES:
   :CUSTOM_ID: orgc780f35e
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf redpen-paragraph
  :if (and (executable-find "redpen")
           (file-directory-p "~/.config/redpen"))
  :ensure t
  :bind
  (("C-c C-r" . redpen-paragraph))
  :hook
  ((LaTeX-mode-hook
    . (lambda ()
        (setq redpen-commands
              '(
                ;; for english command
                "redpen -r json2 -c ~/.config/redpen/redpen-conf-en.xml -f latex %s 2>/dev/null"
                ;; for japanese command
                "redpen -r json2 -c ~/.config/redpen/redpen-conf-ja.xml -f latex %s 2>/dev/null"
                )))
    ))
  :init
  (defvar redpen-commands
    '(
      ;; for english command
      "redpen -r json2 -c ~/.config/redpen/redpen-conf-en.xml %s 2>/dev/null"
      ;; for japanese command
      "redpen -r json2 -c ~/.config/redpen/redpen-conf-ja.xml %s 2>/dev/null"
      ))
  ;;redpen-paragraph-force-reading-whole t
  )
   #+end_src
** =ispell=: spell checker
   :PROPERTIES:
   :CUSTOM_ID: org3737a28e
   :END:
   ispell はコマンドとして =aspell= を利用する.
   #+begin_src emacs-lisp :tangle init.el
(leaf ispell
  :if (file-executable-p "aspell")
  :custom
  (ispell-program-name . "aspell")
  :config
  (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+"))
  )
   #+end_src
** =flyspell=: on-the-fly spell checker [0/1]
   :PROPERTIES:
   :CUSTOM_ID: org820e6b6d
   :END:
   flyspell-mode は別途有効化しておいた方が良いのかもしれない
   #+begin_src emacs-lisp :tangle init.el
(leaf flyspell
  :ensure t
  :blackout (flyspell-mode . "F")
  :defun
  flyspell-emacs-popup-textual
  :preface
  (defun my:flyspell-popup-choose (orig event poss word)
    (if (window-system)
        (funcall orig event poss word)
      (flyspell-emacs-popup-textual event poss word)))
  :advice (:around flyspell-emacs-popup
                   my:flyspell-popup-choose)
  :hook
  ;; flyspell-prog-mode との switch が欲しい
  ((LaTeX-mode-hook . flyspell-mode))
  )
   #+end_src
   - [ ] flyspell-prog-mode との switch が欲しい
** =lookup=: 電子辞書の検索
   :PROPERTIES:
   :CUSTOM_ID: org3002f57f
   :END:
   EPWING化した辞書群を検索するために =lookup-el= ver. 1.4 系列を利用
   #+begin_src emacs-lisp :tangle init.el
(leaf lookup
  :if (and (file-exists-p "/etc/emacs/site-start.d/50lookup-el.el")
           (file-exists-p "/usr/local/share/dict/lookup-enabled"))
  :commands (lookup lookup-region lookup-pattern)
  :bind (("C-c w" . lookup-pattern)
         ("C-c W" . lookup-word))
  :custom
  (lookup-search-agents
   . '((ndeb "/usr/local/share/dict/eijiro" :alias "英辞郎")
       (ndeb "/usr/local/share/dict/waeijiro" :alias "和英辞郎")
       (ndeb "/usr/local/share/dict/rikagaku5" :alias "理化学辞典 第5版")
       (ndeb "/usr/local/share/dict/koujien4" :alias "広辞苑 第4版")
       (ndeb "/usr/local/share/dict/wadai5" :alias "研究社 和英大辞典 第5版")
       (ndeb "/usr/local/share/dict/eidai6" :alias "研究社 英和大辞典 第6版")
       (ndeb "/usr/local/share/dict/colloc" :alias "研究社 英和活用大辞典 ")))
  )
   #+end_src
** =text-adjust=: 全角文字の撲滅
   :PROPERTIES:
   :CUSTOM_ID: org501da28b
   :END:
   #+begin_src emacs-lisp
(leaf text-adjust
  :el-get uwabami/text-adjust.el
  )
   #+end_src
* 補完: =vertico=, =marginalia=, =consult=
  :PROPERTIES:
  :CUSTOM_ID: org5fd7347f
  :END:
  最近話題になりだしたので, ちょっと使い始めてみた.
** 無視する拡張子の追加設定
   :PROPERTIES:
   :CUSTOM_ID: orgbf52614c
   :END:
  とりあえず, 無視するファイルの拡張子を指定しておく.
  #+begin_src emacs-lisp :tangle init.el
(leaf *completion
  :init
  ;; 補完で無視する拡張子の追加．そのうち増える．
  (cl-loop for ext in
           '(;; TeX
             ".dvi"
             ".fdb_latexmk"
             ".fls"
             ".ilg"
             ".jqz"
             ".nav"
             ".out"
             ".snm"
             ".synctex\\.gz"
             ".vrb"
             ;; fortran >= 90
             ".mod"
             ;; zsh
             ".zwc"
             ;; libtool
             ".in"
             ".libs/"
             ;; fxxkin Apple
             ".DS_Store"
             "._DS_Store"
             ;; "org-id-locations"
             )
           do (add-to-list 'completion-ignored-extensions ext))
  )
  #+end_src
** =vertico=: 本体
   :PROPERTIES:
   :CUSTOM_ID: org8362fd9f
   :END:
   [[https://scrapbox.io/emacs/find-file%E3%81%A7Helm%E3%81%BF%E3%81%9F%E3%81%84%E3%81%ABC-l%E3%81%A7%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92%E9%81%A1%E3%82%8B][find-fileでHelmみたいにC-lでディレクトリを遡る - emacs]]
   より, =C-l= で一つ上の階層へ上がれる様にしたり.
   #+begin_src emacs-lisp :tangle init.el
(leaf vertico
  :ensure t
  :preface
  (defun my:disable-selection ()
    (when (eq minibuffer-completion-table #'org-tags-completion-function)
      (setq-local vertico-map minibuffer-local-completion-map
                  completion-cycle-threshold nil
                  completion-styles '(basic))))
  ;;
  (defun my:filename-upto-parent ()
    "Move to parent directory like \"cd ..\" in find-file."
    (interactive)
    (let ((sep (eval-when-compile (regexp-opt '("/" "\\")))))
      (save-excursion
        (left-char 1)
        (when (looking-at-p sep)
          (delete-char 1)))
      (save-match-data
        (when (search-backward-regexp sep nil t)
          (right-char 1)
          (filter-buffer-substring (point)
                                   (save-excursion (end-of-line) (point))
                                   #'delete)))))
  :advice
  (:before vertico--setup
           my:disable-selection)
  :bind
  (:vertico-map (("C-l" . my:filename-upto-parent)))
  :custom-face
  `((vertico-current
     . '((t (:inherit hl-line :background unspecified)))))
  :custom
  `((vertico-count . 9)
    (vertico-cycle . t)
    (vertico-multiline . '(("↓" 0 1
                            (face vertico-multiline))
                           ("…" 0 1
                            (face vertico-multiline))))
    )
  :config
  :hook (after-init-hook . vertico-mode)
  )
  #+end_src
** =marginalia=: リッチな注釈(Enable richer annotations)
   :PROPERTIES:
   :CUSTOM_ID: orge9265e4d
   :END:
   行揃えが微妙. あと, ファイル名を省略表示できないのかな?
   ⇒ [[https://github.com/minad/marginalia/issues/70][Better truncation method for file names #70]]
   #+begin_src emacs-lisp :tangle init.el
(leaf marginalia
  :ensure t
  :bind (("M-A" . marginalia-cycle)
         (:minibuffer-local-map
          ("M-A" . marginalia-cycle)
          ))
  :custom
  `((marginalia-annotators
     . '(marginalia-annotators-light marginalia-annotators-heavy nil)))
  :hook
  (after-init-hook . marginalia-mode)
  )
   #+end_src
** =consult=: 便利コマンド集
   :PROPERTIES:
   :CUSTOM_ID: orged5e5627
   :END:
   とりあえず recetnf が使えないと途方に暮れるので
   =consult-recent-file= のカスタマイズのみ.
   #+begin_src emacs-lisp :tangle init.el
(leaf consult
  :ensure t
  :bind (("C-x C-r" . my:consult-recent-file))
  :custom
  `(;; 増やさないと preview 時に theme がロードされない模様.
    ;; とりあえず default の 10 倍にしている. 1 MB かな?
    (consult-preview-raw-size . 1024000)
    (consult-preview-key  . ,(kbd "C-M-p"))
    (consult-narrow-key   . "<")
    )
  :config
  (defun my:consult-recent-file ()
    "Find recent using `completing-read' with shorten filename"
    (interactive)
    (let ((files (mapcar (lambda (f)
                           (cons (my:shorten-file-path f (- (window-width) 2)) f))
                         recentf-list)))
      (let ((selected
             (consult--read (mapcar #'car files)
                            :prompt "Find recent file: "
                            :sort nil
                            :require-match t
                            :category 'file
                            :state (consult--file-preview)
                            :history 'file-name-history)))
        (find-file (assoc-default selected files)))))
  ;; :advice
  ;;   (:override register-preview
  ;;              consult-register-window)
  ;; :config
  ;;   (setq consult-preview-key (kbd "M-."))
  )
   #+end_src
*** =consult-ghq=: ghq を consult で.
    :PROPERTIES:
    :CUSTOM_ID: org90f5d475
    :END:
    projectile かなんかを使う方が良さげだが, とりあえず.
    #+begin_src emacs-lisp
(leaf consult-ghq
  :el-get uwabami/consult-ghq
  :bind (("C-x f" . consult-ghq-open))
  :custom
  `((consult-ghq-short-list . t))
  )
    #+end_src
** =orderless=: 補完候補の選択
   :PROPERTIES:
   :CUSTOM_ID: orgc12df551
   :END:
   イロイロと凝れそうだけど, とりあえずはデフォルトのままで.
   #+begin_src emacs-lisp :tangle init.el
(leaf orderless
  :ensure t
  ;; :init (leaf flx :ensure t)
  :custom
  `((completion-styles . '(orderless))
    (orderless-matching-styles
     . '(orderless-initialism
         orderless-flex
         orderless-regexp
         orderless-literal))
    )
  )
   #+end_src
* 翻訳
  :PROPERTIES:
  :CUSTOM_ID: org779f9ba7
  :END:
** DeepL 翻訳
   :PROPERTIES:
   :CUSTOM_ID: orga528b584
   :END:
   ブラウザ呼び出し
   #+begin_src emacs-lisp
(leaf *deepl-translate
  :commands my:deepl-translate
  :bind (("C-x T" . my:deepl-translate))
  :preface
  (require 'url-util)
  (defun my:deepl-translate (&optional string)
    (interactive)
    (setq string
          (cond ((stringp string) string)
                ((use-region-p)
                 (buffer-substring (region-beginning) (region-end)))
                (t
                 (save-excursion
                   (let (s)
                     (forward-char 1)
                     (backward-sentence)
                     (setq s (point))
                     (forward-sentence)
                     (buffer-substring s (point)))))))
    (run-at-time 0.1 nil 'deactivate-mark)
    (browse-url
     (concat
      "https://www.deepl.com/translator#en/ja/"
      (url-hexify-string string)
      )))
  )
   #+end_src
** Google 翻訳
   :PROPERTIES:
   :CUSTOM_ID: org48ef2f56
   :END:
   #+begin_src emacs-lisp
(leaf google-translate
  :ensure t
  :init
  (defun google-translate--search-tkk ()
    "Search TKK. @see https://github.com/atykhonov/google-translate/issues/52"
    (list 430675 2721866130))
  :bind
  ("C-x t" . google-translate-at-point)
  :config
  (setq google-translate-backend-method 'curl)
  )
   #+end_src
* Copy & Paste:
  :PROPERTIES:
  :CUSTOM_ID: org12fd2b4e
  :END:
** Linux では =xclip= を利用
   :PROPERTIES:
   :CUSTOM_ID: org1689d1f5
   :END:
   clipboard と PRIMARY の同期には =gpaste= を使っている．
   #+begin_src emacs-lisp :tangle init.el
(leaf xclip
  :if (and (executable-find "xclip")
           (eq system-type 'gnu/linux))
  :ensure t
  :config
  (xclip-mode 1))
   #+end_src
** macOS では =pbcopy/pbpaste= を利用.
   :PROPERTIES:
   :CUSTOM_ID: orgb2de5472
   :END:
   =pbcopy/pbpase= の呼び出し方が変わった? 動かない時がある様な。
   #+begin_src emacs-lisp :tangle init.el
(leaf *macOSclipborad
  :if (eq system-type 'darwin)
  :preface
  (defun my:copy-from-osx ()
    "Get string via pbpaste"
    (shell-command-to-string "pbpaste"))
  (defun my:paste-to-osx (text &optional push)
    "put `TEXT' via pbcopy with `PUSH' mode"
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))
  :config
  (setq interprogram-cut-function   'my:paste-to-osx
        interprogram-paste-function 'my:copy-from-osx)
  )
   #+end_src
* =ibuffer=: buffer の操作
  :PROPERTIES:
  :CUSTOM_ID: org5f756509
  :END:
  buffer を眺めるのは ibuffer が好み
  #+begin_src emacs-lisp :tangle init.el
(leaf ibuffer
  :after all-the-icons-in-terminal
  :defun (ibuffer-current-buffer)
  :defvar (ibuffer-formats)
  :preface
  (defun my:ibuffer-find-file ()
    "Like `find-file', but default to the directory of the buffer at point."
    (interactive)
    (let ((default-directory
            (let ((buf (ibuffer-current-buffer)))
              (if (buffer-live-p buf)
                  (with-current-buffer buf
                    default-directory)
                default-directory))))
      (find-file default-directory)))
  ;;
  :bind (("C-x C-b" . ibuffer-other-window)
         ("C-x b"   . ibuffer-other-window)
         ("C-x M-b" . ibuffer)
         (:ibuffer-mode-map
          ("C-x C-f" . my:ibuffer-find-file))
         )
  :config
  (define-ibuffer-column icon (:name "  ")
    (let ((icon
           (if (and (buffer-file-name)
                    (all-the-icons-auto-mode-match?))
               (all-the-icons-icon-for-file
                (file-name-nondirectory (buffer-file-name)))
             (all-the-icons-icon-for-mode major-mode ))))
      (if (symbolp icon)
          (setq icon
                (all-the-icons-faicon
                 "file-o"
                 :face 'all-the-icons-dsilver))
        icon)))
  ;;
  (setq ibuffer-formats
        `((mark modified read-only
                " " (icon 2 2 :left :elide)
                ,(propertize " " 'display `(space :align-to 8))
                (name 18 18 :left :elide)
                " " (size 9 -1 :right)
                " " (mode 16 16 :left :elide) " " filename-and-process)
          (mark " " (name 16 -1) " " filename)))
  )
  #+end_src
* =wanderulst=: MUA の設定
  :PROPERTIES:
  :CUSTOM_ID: org2c2abb9b
  :END:
  MUA として Wanderlust を使っている
  - [[https://wanderlust.github.io/wl-docs/wl-ja.html][Wanderlust – Yet Another Message Interface On Emacsen –]]
** Emacs 本体側の設定(wanderlust)
   :PROPERTIES:
   :CUSTOM_ID: org47a9ca66
   :END:
   Emacs 本体での設定は以下の通り. Wanderlust 自体の設定は別ファイルで行なわれる．
   ここでは =wl-init-file= を指定することで, 設定ファイルを明示している．
   #+begin_src emacs-lisp :tangle init.el
(leaf wl
  :if (file-exists-p "/etc/emacs/site-start.d/65wl-beta.el")
  :commands (wl wl-other-frame wl-draft wl-user-agent wl-user-agent-compose wl-draft-send wl-draft-kill)
  :preface
  (defun my:wl-mode-line-buffer-identification (&optional id)
    (force-mode-line-update t))
  (defconst my:d:wl-cache-directory
    (expand-file-name "wanderlust" "~/.cache"))
  (unless (file-directory-p
           (expand-file-name "local/Trash" my:d:wl-cache-directory))
    (make-directory
     (expand-file-name "local/Trash" my:d:wl-cache-directory) t))
  :advice (:override wl-mode-line-buffer-identification
                     my:wl-mode-line-buffer-identification)
  :custom
  `((elmo-msgdb-directory     . my:d:wl-cache-directory)
    (elmo-maildir-folder-path . my:d:wl-cache-directory)
    (elmo-cache-directory     . my:d:wl-cache-directory)
    (wl-score-files-directory . my:d:wl-cache-directory)
    (read-mail-command        . #'wl)
    (wl-init-file
     . ,(expand-file-name "init-wl" user-emacs-directory))
    (wl-demo                  . nil)
    )
  :init
  (define-mail-user-agent
    'wl-user-agent
    'wl-user-agent-compose
    'wl-draft-send
    'wl-draft-kill
    'mail-send-hook)
  )
   #+end_src
   割と =/etc/emacs/site-start.d/65wl-beta.el= と重複している気がするが.
** Wanderlust 本体の設定
   :PROPERTIES:
   :CUSTOM_ID: org160184bf
   :END:
   実際の設定は以下の通り
*** byte-compile の準備
    :PROPERTIES:
    :CUSTOM_ID: orge2af69a1
    :END:
     #+begin_src emacs-lisp :tangle init-wl.el
(eval-and-compile
  (leaf el-x
    :el-get (el-x
             :type github
             :pkgname "sigma/el-x"
             :build `(("make" ,(format "EMACSBIN=%s" el-get-emacs)))
             :load-path "lisp"
             )
    :require t
    )
  )
(eval-when-compile
  (require 'cp5022x)
  (require 'wl)
  (require 'mime-def))
     #+end_src
*** 依存/追加ライブラリのインストールと読み込み
    :PROPERTIES:
    :CUSTOM_ID: org9638e017
    :END:
**** rail
     :PROPERTIES:
     :CUSTOM_ID: org587385af
     :END:
     SEMI や FLIM などの UA の表示に [[http://uwabami.github.com/rail/][rail]] を使っている.
     ちなみに rail を有効にすると, 以下の様に User-Agent が表示される
     #+html: <div class="col-7 px2 mx-auto">
     #+html: <amp-img layout="responsive" width=640 height=400 src="https://uwabami.github.io/software/rail/wanderlust_with_or_without_rail.webp" alt="rail preview"></amp-img>
     #+html: </div>

     #+begin_src emacs-lisp :tangle init-wl.el
(leaf rail
  :init
  (unless (locate-library "rail")
    (el-get-bundle uwabami/rail))
  (setq rail-emulate-genjis t)
  :require t
  )
     #+end_src
**** cp5022x を使う
     :PROPERTIES:
     :CUSTOM_ID: orga4113e25
     :END:
     ISO-2022-JP を CP50220 として扱う.
     [[http://d.hatena.ne.jp/kiwanami/20091103/1257243524][Wanderlustと文字コード]] も参照のこと.
     #+begin_src emacs-lisp :tangle init-wl.el
(add-to-list 'mime-charset-coding-system-alist
             '(iso-2022-jp . cp50220))
;; fxxkin outlook
(add-to-list 'mime-charset-coding-system-alist
             '(gb2312 . gbk))
;;
(setq wl-mime-charset 'iso-2022-jp)
;; (setq wl-mime-charset 'utf-8-uni)
     #+end_src
**** SEMI の追加設定
     :PROPERTIES:
     :CUSTOM_ID: orgc4ec7a62
     :END:
     HTML メールを表示するために eww を使う.
     mime-setup がロードされる前に記述する必要あり.
     #+begin_src emacs-lisp :tangle init-wl.el
(leaf mime-setup
  :preface
  (leaf w3m-load)
  (leaf mime-w3m :require t)
  ;; (setq mime-view-text/html-previewer 'shr
  ;;       mime-setup-enable-inline-html 'shr)
  ;; (defvar my:shr-width 72)
  ;; (defun my:shr-insert-document (&rest them)
  ;;   (let ((shr-width my:shr-width)) (apply them)))
  ;; (defun my:mime-shr-preview-text/html (&rest args)
  ;;   (advice-add 'shr-insert-document :around 'my:shr-insert-document)
  ;;   (unwind-protect
  ;;       (apply args)
  ;;     (advice-remove 'shr-insert-document 'my:shr-insert-document)))
  ;; :advice
  ;; (:around mime-shr-preview-text/html
  ;;          my:mime-shr-preview-text/html)
  )
     #+end_src
     どのアプリケーションで開くか → =xdg-open= に丸投げ．
     #+begin_src emacs-lisp :tangle init-wl.el
;; (setq mime-view-mailcap-files '("~/.mailcap"))
     #+end_src
     =~/.mailcap= 自体は以下
     #+begin_src conf :tangle no
applications/*; xdg-open %s;
image/*; xdg-open %s;
video/*; xdg-open %s;
     #+end_src
     MIME の例の保存先の変更
     #+begin_src emacs-lisp :tangle init-wl.el
(setq mime-situation-examples-file
      (concat my:d:tmp "mime-example"))
     #+end_src
     text/plain より html を優先 =(- -;)=
     #+begin_src emacs-lisp :tangle init-wl.el
(setq mime-view-type-subtype-score-alist
      '(((text . plain) . 1)
        ((text . html)  . 0)
        ))
     #+end_src
     音を鳴らすアレやコレの無効化
     #+begin_src emacs-lisp :tangle init-wl.el
(setq mime-play-find-every-situations nil
      mime-play-delete-file-immediately nil
      process-connection-type nil)
     #+end_src
*** 個人情報の設定
    :PROPERTIES:
    :CUSTOM_ID: org6dae78eb
    :END:
    具体的な設定内容は以下のファイルに置いている
    #+begin_src emacs-lisp :tangle init-wl.el
(load (concat my:d:password-store "/wl-info.gpg"))
    #+end_src
    設定している内容は以下の通り
**** 自身のメールアドレスと購読メーリングリストの設定
     :PROPERTIES:
     :CUSTOM_ID: org7f87384b
     :END:
     #+begin_src emacs-lisp :tangle no
;; From: の設定
(setq wl-from (concat user-full-name " <" user-mail-address ">"))
;; (system-name) が FQDN を返さない場合、
;; `wl-local-domain' にホスト名を除いたドメイン名を設定
(setq wl-local-domain "example.com")
;; 自分のメールアドレスのリスト
(setq wl-user-mail-address-list
      (list (wl-address-header-extract-address wl-from)
            ;; "e-mail2@example.com"
            ;; "e-mail3@example.net" ...
            ))
;; 自分の参加しているメーリングリストのリスト
(setq wl-subscribed-mailing-list
      '("wl@lists.airs.net"
        "apel-ja@m17n.org"
        "emacs-mime-ja@m17n.org"
        ;; "ml@example.com" ...
        ))
     #+end_src
**** 送受信用サーバの設定
     :PROPERTIES:
     :CUSTOM_ID: orgba8bc2e7
     :END:
     受信(IMAP)
     #+begin_src emacs-lisp :tangle no
(setq elmo-imap4-default-server "your imap server")
(setq elmo-imap4-default-port '993)
(setq elmo-imap4-default-stream-type 'ssl)
     #+end_src
     送信(SMTP)
     #+begin_src emacs-lisp :tangle no
(setq wl-smtp-posting-server "your smtp server")
(setq wl-smtp-posting-user "your account")
(setq wl-smtp-posting-port 587)
(setq wl-smtp-connection-type 'starttls)
(setq wl-smtp-authenticate-type "login")
     #+end_src
**** From に応じて送信サーバをきりかえる.
     :PROPERTIES:
     :CUSTOM_ID: org9af3a565
     :END:
     本来はメール作成時/返信時の template の切り替えなのだれど,
     送信時の SMTP の設定を from に合わせてきりかえるようにする.
     default に二重に指定しているのは,
     一度別のアカウントに切り替えた後に再びトグルして戻って来た際に元に戻す(上書き)するため.
     #+begin_src emacs-lisp :tangle no
(setq wl-template-alist
      '(("default"
         ("From" . wl-from)
         (wl-smtp-posting-server . "your smtp server")
         (wl-smtp-posting-user . "your account")
         (wl-smtp-posting-port . 587)
         (wl-smtp-connection-type . 'starttls)
         (wl-smtp-authenticate-type . "login")
         )
        ("example1"
         ("From" . "Your Name <account@example1.com>")
         (wl-smtp-posting-server . "smtp.example1.com")
         (wl-smtp-posting-user . "your account")
         (wl-smtp-posting-port . 587)
         (wl-smtp-connection-type . 'starttls)
         (wl-smtp-authenticate-type . "login")
         )
        ("example2"
         ("From" . "Your Name <account@example2.com>")
         (wl-smtp-posting-server . "smtp.example2.com")
         (wl-smtp-posting-user . "your account")
         (wl-smtp-posting-port . 587)
         (wl-smtp-connection-type . 'starttls)
         (wl-smtp-authenticate-type . "plain")
         )
        ("ssh:smtp"
         ;; need ssh tunnel
         ;; ssh -f -N -L 20025:localhost:25 smtp.server.com
         ("From" . "Your Name <account@example3.com>")
         (wl-smtp-posting-server . "localhost")
         (wl-smtp-posting-user . "your ssh account")
         (wl-smtp-posting-port . 20025)
         (wl-smtp-connection-type . 'nil)
         (wl-smtp-authenticate-type . 'nil)
         )
        ))
     #+end_src
     ssh tunnel を自動的にやる事はできないモンだろうか
     (送信時に open して, 送信後に close する, みたいなの).

     ついでに template の切り替えに関して幾つか設定.
     #+begin_src emacs-lisp :tangle init-wl.el
;; template 切り替え時に 内容を表示
(setq wl-template-visible-select t)
     #+end_src
     =draft-mode= で =C-c C-n= をするとテンプレートを切り替え
     #+begin_src emacs-lisp  :tangle init-wl.el
(define-key wl-draft-mode-map "\C-c\C-n" 'wl-template-select)
     #+end_src
     from に応じて wl-from, wl-envelope-from,
     送信 smtp サーバを変更する送信時に変更
     #+begin_src emacs-lisp  :tangle init-wl.el
(add-hook 'wl-draft-send-hook
          (lambda ()
            (set (make-local-variable 'wl-from)
                 (std11-fetch-field "From"))))
     #+end_src
     送信時に自動的に wl-draft-config-alist を適用...しない?
     #+begin_src emacs-lisp  :tangle init-wl.el
(remove-hook 'wl-draft-send-hook 'wl-draft-config-exec)
     #+end_src
*** 基本設定
    :PROPERTIES:
    :CUSTOM_ID: org19ec5248
    :END:
**** imap 関連
     :PROPERTIES:
     :CUSTOM_ID: org69cc3854
     :END:
     デフォルトの認証設定
     フォルダ名は UTF-7 でエンコードされているので,
     表示する際にこれをデコードする
     #+begin_src emacs-lisp :tangle init-wl.el
(setq elmo-imap4-use-modified-utf7 t)
     #+end_src
**** 非同期チェック
     :PROPERTIES:
     :CUSTOM_ID: org2d8166ce
     :END:
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-folder-check-async t)
     #+end_src
**** フォルダの位置の default からの変更
     :PROPERTIES:
     :CUSTOM_ID: org6572a382
     :END:
     =~/.cache/wanderlust/= に集約している
     local の Mail folder の位置
     #+begin_src emacs-lisp :tangle init-wl.el
(setq elmo-maildir-folder-path "~/.cache/wanderlust"
      elmo-localdir-folder-path "~/.cache/wanderlust/local")
     #+end_src
     local フォルダの設定:
     =.lost+found= は =elmo-maildir-folder-path= からの相対パスになっていることに注意
     #+begin_src emacs-lisp :tangle init-wl.el
(setq elmo-lost+found-folder ".lost+found")
(setq wl-queue-folder "+queue")
     #+end_src
     folders の位置の変更
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-folders-file (concat my:d:password-store "/wl-folders.gpg"))
     #+end_src
     Drafts, Trash の置き場所
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-draft-folder "+Drafts")
(setq wl-trash-folder "+Trash")
(setq elmo-lost+found-folder "+lost+found")
(setq wl-temporary-file-directory "~/Downloads/")
     #+end_src
     アドレス帳
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-use-petname t)
(setq wl-address-file  "~/.mua/Address")
     #+end_src
     LDAP サーバからアドレスを引くことも可能.
     以前は GCALDaemon を使って local に ldap サーバを上げていたのだけれども,
     Google Contacts の API が変わったらしく
     GCALDaemon で LDAP サーバは使えなくなったのでコメントアウト.
     #+begin_src emacs-lisp :tangle no
(setq wl-use-ldap t)
(setq wl-ldap-server "localhost")
(setq wl-ldap-port "389")
(setq wl-ldap-base "dc=math,dc=kyoto-u,dc=ac,dc=jp")
     #+end_src
     パスワードの保存先
     #+begin_src emacs-lisp :tangle init-wl.el
(setq elmo-passwd-alist-file-name (concat my:d:password-store "/wl-passwd.gpg"))
     #+end_src
**** フォルダ編集時に backup を作成しない.
     :PROPERTIES:
     :CUSTOM_ID: org72bfee4a
     :END:
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-fldmgr-make-backup nil)
     #+end_src
**** FCC, BCC の設定
     :PROPERTIES:
     :CUSTOM_ID: org223d5fa2
     :END:
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-fcc nil)
;; (setq wl-fcc "%Sent")
     #+end_src
     fcc を既読にする場合は以下．=wl-fcc= が nil の場合には意味は無い
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-fcc-force-as-read t)
     #+end_src
     bcc は常に自身に.
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-bcc (concat user-mail-address))
     #+end_src
**** 起動時に =%INBOX= のみをチェック
     :PROPERTIES:
     :CUSTOM_ID: org4378f104
     :END:
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-auto-check-folder-name "%INBOX")
     #+end_src
**** フォルダ選択時の初期設定
     :PROPERTIES:
     :CUSTOM_ID: org6efc7670
     :END:
     imap の namespace を毎度入力するのが面倒なので, これを追加しておく.
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-default-spec "%")
     #+end_src
**** confirm 関連の設定
     :PROPERTIES:
     :CUSTOM_ID: orgb2cf2b53
     :END:
     スキャン時の問い合わせの無効化.
     ちなみに confirm を nil にしても 問い合わせが無いだけで
     threshold は効くので, 明示的に nil に.
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq elmo-folder-update-confirm nil)
(setq elmo-folder-update-threshold nil)
(setq elmo-message-fetch-confirm nil)
(setq elmo-message-fetch-threshold nil)
(setq wl-prefetch-confirm nil)
(setq wl-prefetch-threshold nil)
     #+end_src
     終了時に確認しない
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-interactive-exit nil)
     #+end_src
     送信時は確認する
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-interactive-send t)
     #+end_src
**** misc.
     :PROPERTIES:
     :CUSTOM_ID: org14b77860
     :END:
     大きいメッセージを送信時に分割しない
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq mime-edit-split-message nil)
     #+end_src
     スレッドは常に閉じる
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-thread-insert-opened nil)
     #+end_src
     3 pain 表示 -> 使わない
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-stay-folder-window nil)
     #+end_src
     未読を優先的に読む
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-summary-move-order 'unread)
     #+end_src
     改ページ無視
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-break-pages nil)
     #+end_src
     icon を使わない → GUI でもメニュー表示してないし, 体感的には遅くなる
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-highlight-folder-with-icon nil)
     #+end_src
**** dispose, delete の設定
     :PROPERTIES:
     :CUSTOM_ID: org83490625
     :END:
     Gmail用に%INBOXでは削除を =wl-trash-folder= への移動ではなく, 「delete」に．
     #+begin_src emacs-lisp   :tangle init-wl.el
(add-to-list 'wl-dispose-folder-alist
             '("^%INBOX" . remove))
     #+end_src
     迷惑メール関連も
     #+begin_src emacs-lisp   :tangle init-wl.el
(add-to-list 'wl-dispose-folder-alist
             '(".*Junk$" . remove))
     #+end_src
**** 折り返しの設定
     :PROPERTIES:
     :CUSTOM_ID: orgd88be525
     :END:
     message は折り返す.
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-message-truncate-lines nil)
     #+end_src
     draft も折り返す
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-draft-truncate-lines nil)
     #+end_src
**** mode-line の設定
     :PROPERTIES:
     :CUSTOM_ID: orgb31f5f2c
     :END:
     長いと嫌なのでイロイロ削る
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-summary-mode-line-format "") ; "%f {%t}(%n/%u/%a)"
(setq wl-message-mode-line-format "") ; "<< %f:%F>> [%m]"
     #+end_src
*** キーバインド関連
    :PROPERTIES:
    :CUSTOM_ID: org51dfe1e0
    :END:
    =C-c C-j= を browse-url に明け渡す
    #+begin_src emacs-lisp :tangle init-wl.el
(define-key wl-draft-mode-map "\C-c\C-j" 'browse-url-at-point)
    #+end_src
    =M-u= で unread にする
    #+begin_src emacs-lisp :tangle init-wl.el
(define-key wl-summary-mode-map "\M-u" 'wl-summary-mark-as-unread)
    #+end_src
    =i= で sync <- Mew 風
    #+begin_src emacs-lisp :tangle init-wl.el
(define-key wl-summary-mode-map "i" 'wl-summary-sync-update)
    #+end_src
    =C-o= は elscreen で使う
    #+begin_src emacs-lisp :tangle init-wl.el
(define-key wl-summary-mode-map "\C-o" nil )
    #+end_src
    =M-o= で =auto-refile=  (Mew 風)
    #+begin_src emacs-lisp :tangle init-wl.el
(define-key wl-summary-mode-map "\M-o" 'wl-summary-auto-refile)
    #+end_src
*** flag とフォルダを行き来する関数の追加
    :PROPERTIES:
    :CUSTOM_ID: org460a927d
    :END:
    "=" でフラグ付きフォルダと
    実際にメッセージのあるフォルダを行き来する.
    Gmail の「スター付き」フォルダでも有効
    #+begin_src emacs-lisp :tangle init-wl.el
(require 'elmo nil 'noerror)
(defun my:wl-summary-jump-to-referer-message ()
  (interactive)
  (when (wl-summary-message-number)
    (if (eq (elmo-folder-type-internal wl-summary-buffer-elmo-folder) 'flag)
        (progn
          (let* ((referer (elmo-flag-folder-referrer
                           wl-summary-buffer-elmo-folder
                           (wl-summary-message-number)))
                 (folder (if (> (length referer) 1)
                             (completing-read
                              (format "Jump to (%s): " (car (car referer)))
                              referer
                              nil t nil nil (car (car referer)))
                           (car (car referer)))))
            (wl-summary-goto-folder-subr folder 'no-sync nil nil t)
            (wl-summary-jump-to-msg (cdr (assoc folder referer)))))
      (when (eq (elmo-folder-type wl-summary-last-visited-folder) 'internal)
        (wl-summary-goto-last-visited-folder)))))
(define-key wl-summary-mode-map "=" 'my:wl-summary-jump-to-referer-message)
    #+end_src
*** summary-mode の表示のカスタマイズ
    :PROPERTIES:
    :CUSTOM_ID: org433d7a5c
    :END:
**** 自分が差出人である mail は To:某 と表示
     :PROPERTIES:
     :CUSTOM_ID: org63a385a5
     :END:
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-summary-showto-folder-regexp ".*")
(setq wl-summary-from-function 'wl-summary-default-from)
     #+end_src
**** サマリ行の表示関連
     :PROPERTIES:
     :CUSTOM_ID: org94145d9c
     :END:
     サマリ行のフォーマット指定
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-summary-line-format
      "%T%P%1@%1>%Y/%M/%D %21(%t%[%19(%c %f%)%]%) %#%~%s"
      wl-summary-width (- (window-width) 1))
     #+end_src
     サマリ表示は切り詰めない
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-subject-length-limit t)
     #+end_src
     スレッドの幅の指定
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-thread-indent-level 2)
(setq wl-thread-have-younger-brother-str "+" ;; "├" ;; "+"
      wl-thread-youngest-child-str "+" ;; "└" ;; "+"
      wl-thread-vertical-str "|";; "│" ;; "|"
      wl-thread-horizontal-str "-";; "─" ;; "-"
      wl-thread-space-str " ")
     #+end_src
     以下の二つの設定を有効にするには
     =elmo-msgdb-extra-fields= を設定する必要がある.
     この変数は振り分け判定にも使用するのでそこで設定している
**** Gmail 風に, 自分宛のメールに ">" をつけて表示する
     :PROPERTIES:
     :CUSTOM_ID: orga083aeb5
     :END:
     元ネタ [[http://d.hatena.ne.jp/khiker/20080206/wanderlust]]
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-user-mail-address-regexp "^uwabami.*\\|^sasakyh.*")
;; 一覧表示での置き換え規則に追加
(defun my:wl-summary-line-for-me ()
  (if (catch 'found
        (let ((to (elmo-message-entity-field wl-message-entity 'to))
              (cc (elmo-message-entity-field wl-message-entity 'cc)))
          (when (or (stringp to) cc)
            (setq to
                  (append (if (stringp to) (list to) to)
                          (when cc
                            (if (stringp cc) (list cc) cc)))))
          (dolist (i to)
            (when (wl-address-user-mail-address-p (eword-decode-string i))
              (throw 'found t)))))
      ">"
    ""))
;; > を summary-line-format に追加
(setq wl-summary-line-format-spec-alist
      (append wl-summary-line-format-spec-alist
              '((?> (my:wl-summary-line-for-me)))))
     #+end_src
**** 添付ファイルがあったら, サマリ行に @ を付ける
     :PROPERTIES:
     :CUSTOM_ID: org04b0fd69
     :END:
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-summary-line-format-spec-alist
      (append wl-summary-line-format-spec-alist
              '((?@ (wl-summary-line-attached)))))
     #+end_src
**** クォートされた文字列もデコードする
     :PROPERTIES:
     :CUSTOM_ID: org9b1eb3e9
     :END:
     昔はあれこれ設定してたけど, 今は良いのかな?
     とりあえず, デコードする長さを default の 1000 から二桁増やしておく.
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq mime-field-decoding-max-size 100000)
;; (setq mime-header-lexical-analyzer
;;       '(
;;         eword-analyze-quoted-string
;;         eword-analyze-domain-literal
;;         eword-analyze-comment
;;         eword-analyze-spaces
;;         eword-analyze-special
;;         eword-analyze-encoded-word
;;         eword-analyze-atom))
(with-eval-after-load 'eword-decode
  (mime-set-field-decoder
   'From nil 'eword-decode-and-unfold-unstructured-field-body)
  (mime-set-field-decoder
   'CC nil 'eword-decode-and-unfold-unstructured-field-body)
  (mime-set-field-decoder
   'To nil 'eword-decode-and-unfold-unstructured-field-body))
     #+end_src
**** Subject が変わってもスレッドを切らない
     :PROPERTIES:
     :CUSTOM_ID: org8e1a38e8
     :END:
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-summary-divide-thread-when-subject-changed nil)
     #+end_src
**** Subject での Tab や複数スペースを無視
     :PROPERTIES:
     :CUSTOM_ID: org4a68d8d4
     :END:
     #+begin_src emacs-lisp  :tangle init-wl.el
;; (defadvice std11-unfold-string (after simply activate)
;;   (setq ad-return-value
;;         (replace-regexp-in-string ad-return-value "[ \t]+" " ")))
     #+end_src
**** 重複メッセージを非表示に
     :PROPERTIES:
     :CUSTOM_ID: org84fec166
     :END:
     フォルダ内の Message-ID が同じメールを非表示にする
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-folder-process-duplicates-alist
      '(
        (".*" . hide)
        ))
     #+end_src
**** sort 順: 返信が来た順
     :PROPERTIES:
     :CUSTOM_ID: orgc0e5bbcf
     :END:
     元ネタは [[http://ikazuhiro.s206.xrea.com/article.php/20140920115345919][Re: wanderlust で GMail 風、新着レス順にソート]].
     あんまり頑張る気がなかったので =el-x= にある =dflet= を使っている。
     #+begin_src emacs-lisp  :tangle init-wl.el
(defun wl-summary-overview-entity-compare-by-reply-date (a b)
  "Compare message A and B by latest date of replies including thread."
  (dflet ((string-max2 (x y) (cond ((string< x y) y)
                                  ('t x)))
         (elmo-entity-to-number (x)
                                (elt (cddr x) 0))
         (thread-number-get-date (x)
                                 (timezone-make-date-sortable
                                  (elmo-msgdb-overview-entity-get-date
                                   (elmo-message-entity
                                    wl-summary-buffer-elmo-folder
                                    x))))
         (thread-get-family (x)
                            (cons x (wl-thread-entity-get-descendant
                                     (wl-thread-get-entity x))))
         (max-reply-date  (x)
                          (cond ((eq 'nil x)
                                 'nil)
                                ((eq 'nil (cdr x))
                                 (thread-number-get-date (car x)))
                                ('t
                                 (string-max2 (thread-number-get-date (car x))
                                              (max-reply-date (cdr x))))))
         )
    (string<
     (max-reply-date (thread-get-family (elmo-entity-to-number a)))
     (max-reply-date (thread-get-family (elmo-entity-to-number b))))))
(add-to-list 'wl-summary-sort-specs 'reply-date)
(setq wl-summary-default-sort-spec 'reply-date)
     #+end_src
*** 振り分け設定
    :PROPERTIES:
    :CUSTOM_ID: orgbeaff272
    :END:
    =$= 以外を振り分け対象に
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-summary-auto-refile-skip-marks '("$"))
    #+end_src
**** 振り分け判定に使用するヘッダ
     :PROPERTIES:
     :CUSTOM_ID: org1581be27
     :END:
     添付の有無の表示にも使うので =Content-Type= も登録.
     あと =Delivered-To= はメールの検索の時に結構重宝している.
     #+begin_src emacs-lisp :tangle init-wl.el
(setq elmo-msgdb-extra-fields
      '(
        "List-Post"
        "List-Id"
        "List-ID"                  ;; たまに List-ID で来るメールあるよね?
        "Resent-CC"
        "Mailing-List"
        "X-Mailing-List"
        "X-ML-Address"
        "X-ML-Name"
        "X-ML-To"
        "X-Loop"
        "Delivered-To"
        "Content-Type"              ;; 添付の有無の表示の為に追加
        "X-Google-Appengine-App-Id" ;; GAEの送信するメールの振り分け用
        "To"
        "Cc"
        "From"
        "Subject"
        "Reply-To"
        "Auto-Submitted"            ;; Git commit/Cron notify
        ))
     #+end_src
*** メッセージ表示
    :PROPERTIES:
    :CUSTOM_ID: org1c00dc9a
    :END:
**** いったん全て非表示に
     :PROPERTIES:
     :CUSTOM_ID: orgbdcad743
     :END:
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-message-ignored-field-list '("^.*:"))
     #+end_src
**** 見たいヘッダだけ表示
     :PROPERTIES:
     :CUSTOM_ID: org279f859d
     :END:
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-message-visible-field-list
      '("^Subject:"
        "^From:"
        "^To:"
        "^Cc:"
        "^Date:"
        "^Message-ID:"
        ))
     #+end_src
**** 表示順の変更
     :PROPERTIES:
     :CUSTOM_ID: org594e5622
     :END:
     Mew 風...
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-message-sort-field-list
      '("^Subject:"
        "^From:"
        "^To:"
        "^Cc:"
        "^Date:"
        "^Message-ID:"
        ))
     #+end_src
**** From, To を省略表示しない
     :PROPERTIES:
     :CUSTOM_ID: org452d7cdb
     :END:
     To や From にアドレスが沢山指定されていると省略されるので, これを無効化
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-message-use-header-narrowing nil)
     #+end_src
*** Wanderlust: Face の設定
    :PROPERTIES:
    :CUSTOM_ID: org1bf4b420
    :END:
    デフォルトより細かく指定するために幾つかの face 定義を追加.
    #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-highlight-message-header-alist
      '(("Subject[ \t]*:"
         . wl-highlight-message-subject-header-contents)
        ("From[ \t]*:"
         . wl-highlight-message-from-header-contents)
        ("Date[ \t]*:"
         . wl-highlight-message-date-header-contents)
        ("\\(.*To\\|Cc\\|Newsgroups\\)[ \t]*:"
         . wl-highlight-message-important-header-contents)
        ("\\(User-Agent\\|X-Mailer\\|X-Newsreader\\)[ \t]*:"
         . wl-highlight-message-unimportant-header-contents)
        ))
;; face の色付け
(defun my:wl-set-face (face spec)
  (make-face face)
  (cond ((fboundp 'face-spec-set)
         (face-spec-set face spec))
        (t
         (wl-declare-face face spec))))
;;
(my:wl-set-face
 'wl-highlight-message-subject-header-contents
 '((t (:foreground "#FF5252" :bold t :italic nil :weight bold ))))
(my:wl-set-face
 'wl-highlight-message-from-header-contents
 '((t (:foreground "#FFD740" :bold t :italic nil :weight bold ))))
(my:wl-set-face
 'wl-highlight-message-date-header-contents
 '((t (:foreground "#5CF19E" :bold t :italic nil :weight bold ))))
    #+end_src
    以下, 元々定義されているfaceの設定⇒[[#org7e722d0e][doom-theme]] のカスタムテーマに移動
    #+begin_src emacs-lisp :tangle no
;; (my:wl-set-face 'wl-highlight-folder-closed-face
;;                 '((t (:foreground "#4cff4c" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-folder-few-face
;;                 '((t (:foreground "#FF4C4C" :bold t :italic nil :weight bold ))))
;; (my:wl-set-face 'wl-highlight-folder-zero-face
;;                 '((t (:foreground "#f6f3e8" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-1
;;                 '((t (:foreground "#7fff7f" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-2
;;                 '((t (:foreground "#ffff7f" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-3
;;                 '((t (:foreground "#7f7fff" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-4
;;                 '((t (:foreground "#7fffff" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-5
;;                 '((t (:foreground "#ff7fff" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-6
;;                 '((t (:foreground "#ff7f7f" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-7
;;                 '((t (:foreground "#4cff4c" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-8
;;                 '((t (:foreground "#ffff4c" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-9
;;                 '((t (:foreground "#4c4cff" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-10
;;                 '((t (:foreground "#4cffff" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-11
;;                 '((t (:foreground "#ff4cff" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-cited-text-12
;;                 '((t (:foreground "#ff4c4c" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-date-header-contents
;;                 '((t (:foreground "#4CFF4C" :bold t :italic nil :weight bold ))))
;; (my:wl-set-face 'wl-highlight-message-header-contents
;;                 '((t (:foreground "#aaaaaa" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-headers
;;                 '((t (:foreground "#4CFFFF" :bold t :italic nil :weight bold ))))
;; (my:wl-set-face 'wl-highlight-message-important-header-contents2
;;                 '((t (:foreground "#4CFF4C" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-signature
;;                 '((t (:foreground "#aaaaaa" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-message-important-header-contents
;;                 '((t (:foreground "#FF4CFF" :bold t :italic nil :weight bold ))))
;; (my:wl-set-face 'wl-highlight-message-subject-header-contents
;;                 '((t (:foreground "#FF4C4C" :bold t :italic nil :weight bold ))))
;; (my:wl-set-face 'wl-highlight-message-unimportant-header-contents
;;                 '((t (:foreground "#aaaaaa" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-summary-answered-face
;;                 '((t (:foreground "#4CFF4C" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-summary-refiled-face
;;                 '((t (:foreground "#7F7FFF" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-summary-thread-top-face
;;                 '((t (:foreground "#F6F3E8" :bold nil :italic nil :weight normal ))))
;; (my:wl-set-face 'wl-highlight-summary-important-flag-face
;;                 '((t (:foreground "#ffff4c" :bold nil :italic nil :weight normal ))))
;;
;; (my:wl-set-face 'wl-highlight-folder-killed-face
;;                 '((t (:foreground ,my:h:black :5Dbold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-folder-many-face
;;                 '((t (:foreground ,my:h:magenta :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-folder-opened-face
;;                 '((t (:foreground "#4cffff" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-folder-path-face
;;                 '((t (:underline t :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-folder-unknown-face
;;                 '((t (:foreground "#4cffff" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-folder-unread-face
;;                 '((t (:foreground ,my:n:blue :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-header-separator-face
;;                 '((t (:inherit highlight :bold t ))))
;; (my:wl-set-face 'wl-highlight-message-citation-header
;;                 '((t (:foreground ,my:h:green :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-copied-face
;;                 '((t (:foreground "#4CFFFF" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-deleted-face
;;                 '((t (:foreground ,my:h:black :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-displaying-face
;;                 '((t (:underline t :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-disposed-face
;;                 '((t (:foreground "#aaaaaa" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-flagged-face
;;                 '((t (:foreground ,my:h:yellow :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-forwarded-face
;;                 '((t (:foreground ,my:h:blue :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-high-read-face
;;                 '((t (:foreground ,my:h:green :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-high-unread-face
;;                 '((t (:foreground ,my:h:orange :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-important-face
;;                 '((t (:foreground "#ffff4c" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-killed-face
;;                 '((t (:foreground ,my:h:black :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-l:read-face
;;                 '((t (:foreground "#4CFF4C" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-l:unread-face
;;                 '((t (:foreground ,my:h:lightb :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-new-face
;;                 '((t (:foreground "#ff4c4c" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-normal-face
;;                 '((t (:foreground "#f6f3e8" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-prefetch-face
;;                 '((t (:foreground ,my:n:blue :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-resend-face
;;                 '((t (:foreground ,my:h:orange :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-target-face
;;                 '((t (:foreground "#4CFFFF" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-temp-face
;;                 '((t (:foreground ,my:n:violet :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-unread-face
;;                 '((t (:foreground "#ff4c4c" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-thread-indent-face
;;                 '((t (:underline t :bold nil :italic nil ))))
    #+end_src
*** 作成/返信設定
    :PROPERTIES:
    :CUSTOM_ID: org32b816f3
    :END:
    自分宛のメールに返信する場合は =To:=, =Cc:= から自分のアドレスを削除
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-draft-always-delete-myself t)
    #+end_src
    "a" (without-argument)では =Reply-To:= や =From:= などで
    指定された唯一人または唯一つの投稿先に返信.
    また, =X-ML-Name:= と =Reply-To:= がついているなら =Reply-To:= 宛に返信
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-draft-reply-without-argument-list
      '((("X-ML-Name" "Reply-To") . (("Reply-To") nil nil))
        ("X-ML-Name" . (("To" "Cc") nil nil))
        ("Followup-To" . (nil nil ("Followup-To")))
        ("Newsgroups" . (nil nil ("Newsgroups")))
        ("Reply-To" . (("Reply-To") nil nil))
        ("Mail-Reply-To" . (("Mail-Reply-To") nil nil))
        ("From" . (("From") nil nil))))
    #+end_src
    =C-u a= (with-argument)であれば関係する全ての人・投稿先に返信
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-draft-reply-with-argument-list
      '(("Followup-To" . (("From") nil ("Followup-To")))
        ("Newsgroups" . (("From") nil ("Newsgroups")))
        ("Mail-Followup-To" . (("Mail-Followup-To") nil ("Newsgroups")))
        ("From" . (("From") ("To" "Cc") ("Newsgroups")))))
    #+end_src
    サマリ表示には petname を使うが, 引用には使わない
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-default-draft-cite-decorate-author nil)
    #+end_src
**** ドラフトの自動保存の無効化
     :PROPERTIES:
     :CUSTOM_ID: orgc8e9533f
     :END:
     偶に暴発している様な...? elscreen のせいかしら.
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-auto-save-drafts-interval nil)
     #+end_src
**** メール本文の文字コード
     :PROPERTIES:
     :CUSTOM_ID: orgccd69748
     :END:
     丸囲み数字なんかが入ってしまうと
     勝手にエンコーディングが変わってしまって鬱陶しい. どうしたモンだろうかね.
     #+begin_src emacs-lisp :tangle no
(add-hook 'wl-draft-mode-hook
          (lambda ()
            (add-to-list 'mime-charset-type-list '(utf-8 8 nil))))
     #+end_src
**** draft mode で orgtbl を有効に
     :PROPERTIES:
     :CUSTOM_ID: org62a575b3
     :END:
     #+begin_src emacs-lisp  :tangle init-wl.el
(add-hook 'wl-draft-mode-hook
          (lambda ()
            (progn
              (require 'org-table)
              #'turn-on-orgtbl)))
     #+end_src
**** c-sig
     :PROPERTIES:
     :CUSTOM_ID: orgc1db3638
     :END:
     署名の選択に c-sig を使用している.
     設定は以下の通り. Mew 風に =C-c <tab>= で signature を挿入するようにしている
     #+begin_src emacs-lisp  :tangle init-wl.el
(leaf c-sig
  :commands insert-signature-eref
  :config
  (eval-when-compile (require 'wl))
  (setq sig-insert-end t
        sig-save-to-sig-name-alist nil
        message-signature-file nil)
  )
(define-key wl-draft-mode-map "\C-c\t" 'insert-signature-eref)
(add-hook 'wl-draft-mode-hook
          (lambda ()
            (define-key (current-local-map) "\C-c\C-w"
              'insert-signature-eref)))
     #+end_src
*** GPG 署名
    :PROPERTIES:
    :CUSTOM_ID: orgda22b5d8
    :END:
    以前は mailcrypt を使っていたけれど,
    epa があるので主にキーバインドの設定のみ.
    =draft-mode= の文字コードをあらかじめ指定しておかないと,
    送信時に文字コードが変換されるので不正な署名となってしまう.

    もっとうまい方法/正攻法がありそうな気がするけれど,
    使えてるから, まあ良いかな, とか.
    #+begin_src emacs-lisp :tangle init-wl.el
(setq mime-pgp-verify-when-preview nil)
(defun my:epa-wl-decrypt-message ()
  (interactive)
  (save-window-excursion
    (wl-summary-jump-to-current-message)
    (wl-message-decrypt-pgp-nonmime)))
(defun my:epa-wl-verify-message ()
  (interactive)
  (save-selected-window
    (wl-summary-jump-to-current-message)
    (wl-message-verify-pgp-nonmime)))
(leaf-keys ((:wl-summary-mode-map
             ("C-c : d" . my:epa-wl-decrypt-message)
             ("C-c : v" . my:epa-wl-verify-message))
            (:wl-draft-mode-map
             ("C-c : s" . epa-mail-sign)
             ("C-c : e" . epa-mail-encrypt)))
           )
    #+end_src
*** 検索
    :PROPERTIES:
    :CUSTOM_ID: org5d7309d7
    :END:
    notmuchを使う.
    #+begin_src emacs-lisp  :tangle init-wl.el
(leaf elmo-search
  :config
  (elmo-search-register-engine 'notmuch-custom 'local-file
                               :prog "notmuch-query-custom"
                               :args '(elmo-search-split-pattern-list)
                               :charset 'utf-8)
  (setq elmo-search-default-engine 'notmuch-custom))
(leaf wl-qs
  :config
  (setq wl-quicksearch-folder "[]"
        )
  )
(leaf-keys ((:wl-summary-mode-map
             ("v" . wl-quicksearch-goto-search-folder-wrapper))
            (:wl-folder-mode-map
             ("v" . wl-quicksearch-goto-search-folder-wrapper)))
           )
    #+end_src
    実際の呼び出しはスレッドを全部取得したいので以下を呼び出している
    #+begin_src sh :tangle no
#!/bin/sh
if [ ! x"$*" = x"" ] ; then
    res=$(notmuch search --output=threads "$*")
fi
if [ ! x"$res" = x"" ] ; then
    echo $res | xargs notmuch search --sort=oldest-first --output=files
fi
    #+end_src
    検索時にメールが多すぎると怒られるので. 数字は適当.
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq elmo-multi-divide-number 2000000
      elmo-multi-number 2000000)
    #+end_src
** Linux Desktop で =mailto:= リンクを扱うために
   :PROPERTIES:
   :CUSTOM_ID: orgcfa9b17b
   :END:
   ついでに =mailto= のリンクを emacsclient で扱うために,
   以下の関数を定義しておく
   #+begin_src emacs-lisp :tangle init.el
(defun my:mailto-compose-mail (mailto-url)
  "Custom: handling mailto: link"
  (if (and (stringp mailto-url)
           (string-match "\\`mailto:" mailto-url))
      (progn
        (eval-and-compile (require 'rfc2368))
        (let* ((headers (mapcar (lambda (h) (cons (intern (car h)) (cdr h)))
                                (rfc2368-parse-mailto-url mailto-url)))
               (good-headers (cl-remove-if (lambda (h) (member (car h) '(Body))) headers))
               (body (cdr (assoc 'Body headers))))
          (wl-draft good-headers nil nil body)))))
   #+end_src
   Desktop の設定では
   #+begin_src sh :tangle no
#!/bin/sh
# emacs-mailto-handler

mailto=$1
mailto="mailto:${mailto#mailto:}"
mailto=$(printf '%s\n' "$mailto" | sed -e 's/[\"]/\\&/g')
elisp_expr="(my:mailto-compose-mail \"$mailto\")"

emacsclient -a "" -n --eval "$elisp_expr" \
            '(set-window-dedicated-p (selected-window) t)'
   #+end_src
   をメーラとして指定すれば良い．
   GNOME は =.desktop= ファイルが無いと「お気に入り」登録ができないので
   以下のファイルを適当な名前で =~/.local/share/applications/= 以下に放り込んでおくと良いだろう
   #+begin_src conf :tangle no
[Desktop Entry]
Name=Emacs Mail Handler
GenericName=Mail User Agent
X-GNOME-FullName=Emacs Mail Handler
Comment=Use emacsclient as MUA, handling mailto link
Keywords=email
Exec=/home/uwabami/bin/emacs-mailto-handler %U
Icon=emacs25
Terminal=false
Type=Application
Categories=GNOME;GTK;Office;Email;
StartupNotify=false
MimeType=application/mbox;message/rfc822;x-scheme-handler/mailto;
   #+end_src
** メールからの予定の取り込み: =mhc=
   :PROPERTIES:
   :CUSTOM_ID: org215a97b9
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf mhc
  :if (file-directory-p (concat (getenv "HOME") "/.config/mhc"))
  :ensure t
  :disabled t
  :commands (mhc-import)
  :init
  (setq mhc-calendar-day-strings ["日" "月" "火" "水" "木" "金" "土"]
        mhc-calendar-header-function 'mhc-calendar-make-header-ja
        mhc-calendar-language 'japanese)
  )
   #+end_src
* 閉じタグの入力補助: =smartparens=
  :PROPERTIES:
  :CUSTOM_ID: orgc0b8a536
  :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf smartparens
  :disabled t
  :ensure t
  :blackout t
  :defun (sp-pair)
  :hook (after-init-hook . smartparens-global-mode)
  :config
  (require 'smartparens-config)
  (sp-pair "=" "=" :actions '(wrap))
  (sp-pair "+" "+" :actions '(wrap))
  (sp-pair "<" ">" :actions '(wrap))
  (sp-pair "$" "$" :actions '(wrap))
  )
  #+end_src
* カラーコードに色付け: =rainbow-mode=
  :PROPERTIES:
  :CUSTOM_ID: org1f0e431b
  :END:
  =#RRGGBB= のカラーコードに勝手に色が付く．CSS の編集中なんかで地味に便利．
  #+begin_src emacs-lisp :tangle init.el
(leaf rainbow-mode
  :ensure t
  :blackout `((rainbow-mode . ,(format " %s" "\x1F308")))
  )
  #+end_src
* 対応する括弧を見易く: =rainbow-delimiters=
  :PROPERTIES:
  :CUSTOM_ID: orgdddd3388
  :END:
  対応する括弧を強調表示してくれる
  [[https://www.emacswiki.org/emacs/RainbowDelimiters][RainbowDelimiters]]:
  global に有効にするのは他の
  Major modeとの衝突があるので止めた方が良い, らしい．
  #+begin_src emacs-lisp :tangle init.el
(leaf rainbow-delimiters
  :ensure t
  :blackout t
  :hook (prog-mode-hook . rainbow-delimiters-mode)
  )
  #+end_src
* Org-mode
  :PROPERTIES:
  :CUSTOM_ID: org7b7eccc9
  :END:
  =org-mode= が無いと生きていけない体になりました
** 基本設定: =org=
   :PROPERTIES:
   :CUSTOM_ID: orgb143e870
   :END:
   目新しい設定はしていない, と思う．
   #+begin_src emacs-lisp :tangle init.el
;; org-plus-contrib
(leaf org
  :ensure t
  :blackout `((org-mode . ,(all-the-icons-icon-for-mode 'org-mode)))
  :bind (("C-x n s" . org-narrow-to-subtree)
         ("C-x n w" . widen)
         ("C-c a"   . org-agenda)
         ("C-x m"   . org-capture)
         ("C-x M"   . org-journal-new-entry)
         )
  :advice
  (:before org-calendar-holiday
           (lambda () (require 'japanese-holidays)))
  :mode
  ;; 昔のメモ(howm)も org-mode で開く
  (("\\.org\\'" "\\.howm\\'". org-mode))
  :preface
  ;;; timestamp 更新文字列の変更:
  ;;  org-mode では ＃+DATE: をひっかける用に(＃は小文字)．
  (defun my:org-timestamp-hook ()
    "Change `time-stamp-start' in org-mode"
    (set (make-local-variable 'time-stamp-start) "#\\+date: ")
    (set (make-local-variable 'time-stamp-end)   "\$")
    )
  ;; GTD: TODO→...→DONE としたエントリを =Arhive.org= に移動
  (defun my:org-archive-done-tasks ()
    (interactive)
    (org-map-entries 'org-archive-subtree "/DONE" 'file))
  :hook
  `((org-mode-hook
     . ,(lambda ()
          (my:org-timestamp-hook)
          (leaf org-tempo :require t)))
    (org-todo-statistics-hook       . my:org-archive-done-tasks)
    (org-todo-after-statistics-hook . my:org-archive-done-tasks))
  :custom
  `(;; Nextcloud に保存する
    (org-directory              . ,(expand-file-name my:d:org))
    ;; return でリンクを辿る
    (org-return-follows-link    . t)
    ;; 見出しを畳んで表示
    (org-startup-folded         . t)
    ;; 折り返し無し
    (org-startup-truncated      . t)
    ;; link handler → xdg-open 任せ
    (org-file-apps-defaults     . '((remote . emacs)
                                    (system . "xdg-open %s")
                                    (t      . "xdg-open %s")))
    (org-file-apps-defaults-gnu . '((remote . emacs)
                                    (system . "xdg-open %s")
                                    (t      . "xdg-open %s")))
    (org-file-apps              . '((auto-mode . emacs)
                                    ("\\.mm\\'" . default)
                                    ("\\.x?html?\\'" . "xdg-open %s")
                                    ("\\.pdf\\'" . "xdg-open %s")))
    ;; GTD: 状態の追加
    (org-todo-keywords          . '((sequence "TODO(t)" "WAIT(w)" "SOMEDAY(s)" "|" "DONE(d)" "CANCEL(c)")
                                    (type "ARTICLE(a)" "|" "DONE(d)")
                                    (type "MEMO(m)" "|" "DONE(d)")))
    (org-todo-keyword-faces     . '(("TODO"    . org-todo)
                                    ("WAIT"    . org-todo)
                                    ("ARTICLE" . (:foreground "#7fbfff" :weight bold))
                                    ("MEMO"    . (:foreground "#7fbfff" :weight bold))
                                    ("SOMEDAY" . (:foreground "#7fff7f" :weight bold))))
    ;; GTD: タグの追加
    (org-tag-alist              . '(("OFFICE"     . ?o)
                                    ("HOME"       . ?h)
                                    ("MAIL"       . ?m)
                                    ("WORK"       . ?w)
                                    ("Debian"     . ?d)
                                    ("Computer"   . ?c)
                                    ("Book"       . ?b)
                                    ("Emacs"      . ?e)
                                    ("TeX"        . ?t)
                                    ("Ruby"       . ?r)
                                    ("IGNORE"     . ?i)
                                    ("PLANNED"    . ?p)
                                    ))
    ;; DONE → Archive.org に移動
    (org-archive-location       . "Archive.org::")
    ;; modules → とりあえずクリアしておく
    (org-modules  . '())
    )
  :config
  ;; +打ち消し+ の font-lock の変更 →これはテーマに任せるべき?
  (setq org-emphasis-alist
        (cons '("+" '(:strike-through t :foreground "#999999"))
              (cl-delete "+" org-emphasis-alist :key 'car :test 'equal)))
  )
   #+end_src
** Org-Id
   :PROPERTIES:
   :CUSTOM_ID: org67465ee0
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf org-id
  :commands
  (my:add-custom-id
   my:get-custom-id
   my:org-custom-id-get
   my:delete-all-id-in-file
   my:org-id-add-to-headlines-in-file
   )
  :init
  (leaf org-macs :require t)
  :custom
  `((org-id-locations-file
     . ,(expand-file-name "org-id-locations" my:d:share))
    ;; (org-id-link-to-org-use-id . create-if-interactive-and-no-custom-id)
    )
  :config
  (defun my:add-custom-id ()
    "Add \"CUSTOM_ID\" to the current tree if not assigned yet."
    (interactive)
    (my:org-custom-id-get nil t))
  ;;
  (defun my:get-custom-id ()
    "Return a part of UUID with an \"org\" prefix.
e.g. \"org3ca6ef0c\"."
    (let* ((id (org-id-new "")))
      (when (org-uuidgen-p id)
        (downcase (concat "org"  (substring (org-id-new "") 0 8))))))
  ;;
  (defun my:org-custom-id-get (&optional pom create)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
See https://writequit.org/articles/emacs-org-mode-generate-ids.html"
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          (setq id (my:get-custom-id))
          (unless id
            (error "Invalid ID"))
          (org-entry-put pom "CUSTOM_ID" id)
          (message "--- CUSTOM_ID assigned: %s" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))
  ;;
  (defun my:delete-all-id-in-file ()
    (interactive)
    (goto-char 1)
    (while (not (eq (point) (point-max)))
      (org-next-visible-heading 1)
      (let ((id (org-entry-get (point) "ID")))
        (when id
          (message "ID: %s" id)
          (org-delete-property "ID"))))
    (message "--- done."))
  ;;
  (defun my:org-id-add-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the current file.
See https://writequit.org/articles/emacs-org-mode-generate-ids.html"
    (interactive)
    (save-excursion
      (widen)
      (goto-char (point-min))
      (when (re-search-forward "^#\\+options:.*auto-id:t" (point-max) t)
        (org-map-entries
         (lambda () (my:org-custom-id-get (point) 'create))))))
  ;;
  :hook (before-save-hook
         . (lambda ()
             (when (and (eq major-mode 'org-mode)
                        (eq buffer-read-only nil))
               (my:org-id-add-to-headlines-in-file))))
  )
   #+end_src
** Babel
   :PROPERTIES:
   :CUSTOM_ID: org99399f3b
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf org-babel
  :after all-the-icons-in-terminal
  :blackout
  `((org-src-mode . ,(format " %s" (all-the-icons-octicon "code"))))
  :custom
  (;; font-lock
   (org-src-fontify-natively         . t)
   ;; TAB の挙動
   (org-src-tab-acts-natively        . t)
   ;; インデント
   (org-edit-src-content-indentation . 0)
   ;; インデントを残す
   (org-src-preserve-indentation     . t))
  )
   #+end_src
** Agenda: スケジュール, TODO 表示
   :PROPERTIES:
   :CUSTOM_ID: org016dbf67
   :END:
   GTD 用の設定．後述の =org-gcal= と =orgmine= で取得したデータも表示している．
   ついでに
   - 土曜日をの face を追加.
   - 祝日, 休日を日曜と同じfaceにする.
   なんて事もやっている．元ネタは [[https://julien.danjou.info/blog/2010/org-mode-and-holidays][Org-mode and holidays]]
   #+begin_src emacs-lisp :tangle init.el
(leaf org-agenda
  :commands (org-agenda)
  :defer-config
  (defface my:org-agenda-date-saturday
    '((t (:foreground "#7FBFFF" :bold t )))
    "Agenda 表示中の土曜日用のface")
  (defface my:org-agenda-date-today-saturday
    '((t (:inherit my:org-agenda-date-saturday :underline t)))
    "Agenda 表示中の今日かつ土曜日用のface")
  (defface my:org-agenda-date-today-weekend
    '((t (:inherit org-agenda-date-weekend :underline t)))
    "Agenda 表示中の今日かつ日・祝日用のface")
  ;; こっからは org-gcal で同期したカレンダーの色
  (defface my:org-agenda-calendar-Univ
    '((t (:foreground "#7FFF7F")))
    "Agenda 表示中, Univ.org の表示 face"
    :group 'org-agenda )
  (defface my:org-agenda-calendar-Schedule
    '((t (:foreground "#7FFFFF")))
    "Agenda 表示中, Schedule.org の表示 face"
    :group 'org-agenda )
  (defface my:org-agenda-calendar-GFD
    '((t (:foreground "#FFFF7F")))
    "Agenda 表示中, GFD.org の表示 face"
    :group 'org-agenda )
  (defface my:org-agenda-calendar-DebianJP
    '((t (:foreground "#BF7FFF")))
    "Agenda 表示中, DebianJP.org の表示 face"
    :group 'org-agenda )
  (defface my:org-agenda-calendar-twitter
    '((t (:foreground "#CCCCCC")))
    "Agenda 表示中, Twitter log の表示 face"
    :group 'org-agenda )
  ;; 更新用の関数 - とりあえず動いているので良しとするが,
  ;; リファクタリングしたい
  (defun my:org-agenda-day-face-function (date)
    "Compute DATE face for saturday, holidays."
    (cl-dolist (file (org-agenda-files nil 'ifmode))
      (cond
       ((member (calendar-day-of-week date) '(0))
        (if (org-agenda-todayp date)
            (cl-return 'my:org-agenda-date-today-weekend))
        (cl-return 'org-agenda-date-weekend))
       ((member (calendar-day-of-week date) '(6))
        (if (org-agenda-todayp date)
            (cl-return 'my:org-agenda-date-today-saturday))
        (cl-return 'my:org-agenda-date-saturday)))
      (let ((face
             (cl-dolist (entry (org-agenda-get-day-entries file date))
               (let ((category (with-temp-buffer
                                 (insert entry)
                                 (org-get-category (point-min)))))
                 (when (or (string= "祝日" category)
                           (string= "休日" category))
                   (if (org-agenda-todayp date)
                       (cl-return 'my:org-agenda-date-today-weekend)
                     (cl-return 'org-agenda-date-weekend)))))))
        (when face (cl-return face)))))
  (setq org-agenda-day-face-function
        'my:org-agenda-day-face-function)
  ;; font-lock の適用
  (defun my:org-agenda-finalize-font-lock ()
    "Custom: apply custom font-lock"
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "Univ:" nil t)
        (add-text-properties
         (match-beginning 0) (point-at-eol)
         '(face my:org-agenda-calendar-Univ)))
      (goto-char (point-min))
      (while (re-search-forward "Schedule:" nil t)
        (add-text-properties (match-beginning 0) (point-at-eol)
                             '(face my:org-agenda-calendar-Schedule)))
      (goto-char (point-min))
      (while (re-search-forward "MHC:" nil t)
        (add-text-properties (match-beginning 0) (point-at-eol)
                             '(face my:org-agenda-calendar-Schedule)))
      (goto-char (point-min))
      (while (re-search-forward "DebianJP:" nil t)
        (add-text-properties (match-beginning 0) (point-at-eol)
                             '(face my:org-agenda-calendar-DebianJP)))
      (goto-char (point-min))
      (while (re-search-forward "GFD:" nil t)
        (add-text-properties (match-beginning 0) (point-at-eol)
                             '(face my:org-agenda-calendar-GFD)))
      (goto-char (point-min))
      (while (re-search-forward "twitter:" nil t)
        (add-text-properties (match-beginning 0) (point-at-eol)
                             '(face my:org-agenda-calendar-twitter)))
      (goto-char (point-min))
      (while (re-search-forward "誕生日:" nil t)
        (add-text-properties (match-beginning 0) (point-at-eol)
                             '(face org-agenda-date-weekend)))
      (goto-char (point-min))
      (while (re-search-forward "祝日:" nil t)
        (add-text-properties (match-beginning 0) (point-at-eol)
                             '(face org-agenda-date-weekend)))
      (goto-char (point-min))
      (while (re-search-forward "休日:" nil t)
        (add-text-properties (match-beginning 0) (point-at-eol)
                             '(face org-agenda-date-weekend)))))
  ;;
  (add-hook 'org-agenda-finalize-hook
            #'my:org-agenda-finalize-font-lock)

  (setq org-agenda-span 'day
        org-agenda-format-date "%Y/%m/%d (%a)"
        org-agenda-start-on-weekday 0
        org-agenda-weekend-days '(0)
        org-agenda-repeating-timestampo-show-all t
        org-agenda-day-face-function 'my:org-agenda-day-face-function
        org-agenda-custom-commands
        '(
          ("n" "agenda and all TODO list"
           (
            (agenda ""
                    ((org-agenda-ndays 1)
                     (org-agenda-entry-types '(:timestamp :sexp))))
            (todo "TODO"
                  ((org-agenda-prefix-format " %i %-22:c")))
            (todo "新規|着手|進行中|確認"
                  ((org-agenda-prefix-format " %i %-22:c")))
            (todo "WAIT"
                  ((org-agenda-prefix-format " %i %-22:c")))

            (todo "SOMEDAY"
                  ((org-agenda-prefix-format " %i %-22:c")))
            ))
          ("N" "All memo entry"
           (;;
            (todo "MEMO")
            ))
          )
        )
  ;; 使用するファイル
  (dolist (file
           '("Archive.org"
             "Holidays.org"
             "Memo.org"
             "Schedule.org"
             "MHC.org"
             "GFD.org"
             "Univ.org"
             "DebianJP.org"
             "twitter.org"
             "redmine_GFD.org"
             "redmine_FluidSoc.org"
             ))
    (add-to-list 'org-agenda-files (expand-file-name file my:d:org)))
  (add-to-list 'org-agenda-files (locate-user-emacs-file "README.org"))
  ;; (if (file-directory-p
  ;;      (expand-file-name "Public/" (getenv "HOME")))
  ;;     (dolist (file
  ;;              (directory-files-recursively
  ;;               (expand-file-name "Public/" (getenv "HOME")) "org$"))
  ;;       (add-to-list 'org-agenda-files file)))
  (if (file-directory-p
       (expand-file-name "journal/" my:d:org))
      (dolist (file
               (directory-files-recursively
                (expand-file-name "journal/" my:d:org) "org$"))
        (add-to-list 'org-agenda-files file)))
  )
   #+end_src
** Org-roam
   :PROPERTIES:
   :CUSTOM_ID: orgbbaf7c91
   :END:
** Org-journal: 日記
   :PROPERTIES:
   :CUSTOM_ID: org456c87fa
   :END:
   機能が豊富なのだが, イマイチ使いこなせていない.
   #+begin_src emacs-lisp :tangle init.el
(leaf org-journal
  :if (and (file-directory-p my:d:org)
           (>= emacs-major-version 25))
  ;; :commands my:org-journal-new-entry
  :commands org-journal-new-entry
  ;; :bind ((:org-journal-mode-map
  ;;         ("C-c C-c" . my:org-journal-entry-save-and-exit)))
  :ensure t
  :init
  ;; (defun my:org-journal-new-entry (prefix &optional time)
  ;;   "Add new journal entry on new elscreen"
  ;;   (interactive "P")
  ;;   (elscreen-create)
  ;;   (org-journal-new-entry nil time))
  ;;
  ;; (defun my:org-journal-entry-save-and-exit ()
  ;;   "Save journal entry and close elscreen buffer"
  ;;   (interactive)
  ;;   (save-buffer)
  ;;   (elscreen-kill))
  :hook
  ((org-journal-mode-hook
    . (lambda()
        (setq-local truncate-lines t))))
  :custom
  `((org-journal-file-type                 . 'yearly)
    (org-journal-dir                       . ,(expand-file-name "journal" my:d:org))
    (org-journal-file-format               . "%Y.org")
    (org-journal-cache-file
     . ,(expand-file-name "org-journal.cache" my:d:tmp))
    (org-journal-date-format               . "%x (%a)")
    (org-journal-time-format               . "<%Y-%m-%d %R> ")
    (org-journal-time-prefix               . "** MEMO ")
    (org-journal-enable-agenda-integration . t)
    (org-journal-find-file                 . 'find-file)
    (org-journal-carryover-delete-empty-journal . 'ask)
    (org-journal-start-on-weekday          . 0) ;; sunday
    )
  :config
  (eval-and-compile 'browse-url)
  (with-eval-after-load 'org-journal
    (global-set-key (kbd "C-c C-j") 'browse-url-at-point))
  )
   #+end_src
** Org-capture: メモ取り
   :PROPERTIES:
   :CUSTOM_ID: orgbe835a6b
   :END:
   キーバインドは以前 changelog memo をやっていた時の癖で =C-x m= をメモにしている.
   #+begin_src emacs-lisp :tangle init.el
(leaf org-capture
  :if (file-directory-p my:d:org)
  :commands org-capture
  :pl-setq
  (my:org:calendar1 my:org:calendar2)   ;; 名前がイケてないっ!
  :config
  (defun my:org-journal-add-date-entry-capture ()
    (org-journal-new-entry t)
    (goto-char (point-max))
    )
  (setq org-default-notes-file (expand-file-name "Memo.org" my:d:org))
  (setq org-capture-templates
        `(
          ("t" "TODO" plain
           (function my:org-journal-add-date-entry-capture)
           "** TODO %(format-time-string org-journal-time-format)%^{title} %^g\n  %?\n  %a"
           :prepend nil
           :unnarrowed nil
           :kill-buffer t
           )
          ("m" "メモを追加" plain
           (function my:org-journal-add-date-entry-capture)
           "** MEMO %(format-time-string org-journal-time-format)%?"
           :prepend nil
           :unnarrowed nil
           :kill-buffer t
           )
          ("a" "少し長めの記事を追加する" plain
           (function my:org-journal-add-date-entry-capture)
           "** ARTICLE %(format-time-string org-journal-time-format)%? "
           :prepend nil
           :unnarrowed nil
           :kill-buffer t
           )
          ("s" "個人予定表スケジュールを追加" plain
           (file ,(expand-file-name "Schedule.org" my:d:org))
           "* %^{prompt}\n  :PROPERTIES:\n  :calendar-id: %(format \"%s\" my:org:calendar1)\n  :END:\n  :org-gcal:\n%?\n%i\n  :END:"
           :prepend nil
           :unnarrowed nil
           :kill-buffer t
           )
          ("u" "仕事予定表スケジュールを追加" plain
           (file ,(expand-file-name "Univ.org" my:d:org))
           "* %^{prompt}\n  :PROPERTIES:\n  :calendar-id: %(format \"%s\" my:org:calendar2)\n  :END:\n  :org-gcal:\n%?\n%i\n  :END:"
           :prepend nil
           :unnarrowed nil
           :kill-buffer t
           )
          )
        )
  )
   #+end_src
** OrgとGoogle カレンダーの連携: =org-gcal=
   :PROPERTIES:
   :CUSTOM_ID: org6a1d2f0c
   :END:
   request token 等の置き場所の変更
   実際の情報等は =password-store= を使って設定しておく.
   ついでに agenda 表示の際の色付けを設定．
   #+begin_src emacs-lisp :tangle init.el
(leaf org-gcal
  :if (and my:d:password-store
           (file-directory-p my:d:org))
  :ensure t
  :commands (org-gcal-fetch org-gcal-sync)
  :preface
  (setq org-gcal-dir (expand-file-name "org-gcal" my:d:tmp))
  (unless (file-directory-p org-gcal-dir)
    (make-directory org-gcal-dir))
  :init
  (leaf org-generic-id
    :custom
    `((org-generic-id-locations-file
       . ,(expand-file-name "org-generic-id-locations"  my:d:share))
      )
    )
  (leaf request
    :ensure t
    :preface
    (setq request-storage-directory (expand-file-name "request" my:d:tmp))
    (unless (file-directory-p request-storage-directory)
      (make-directory request-storage-directory))
    :config
    (setq request-storage-directory (expand-file-name "request" my:d:tmp))
    )
  (leaf persist
    :config
    (setq persist--directory-location (expand-file-name "persist" my:d:tmp)))
  :custom
  `((org-gcal-dir          . ,(expand-file-name
                               "org-gcal" my:d:tmp))
    (org-gcal-token-file   . ,(expand-file-name
                               "org-gcal/.org-gcal-token" my:d:tmp))
    (org-gcal-down-days    . 180)  ;; 未来 180 日
    (org-gcal-up-days      .  30)  ;; 過去 30 日
    (org-gcal-auto-archive . t)
    (org-gcal-notify-p     . nil)
    (org-gcal-remove-api-cancelled-evetnts . t)
    (org-gcal-remove-events-with-cancelled-todo . t)
    ;;
    (alert-log-messages    . t)
    (alert-default-style   .'libnotify))
  :pl-setq
  (org-gcal-client-id
   org-gcal-client-secret
   org-gcal-file-alist)
  :hook (org-capture-after-finalize-hook  . org-gcal-fetch)
  )
   #+end_src
** OrgとRedmine の連携: =orgmine=
   :PROPERTIES:
   :CUSTOM_ID: org5908f7b5
   :END:
   素晴しい!!
   [[https://github.com/kametoku/orgmine][kametoku/orgmine: Emacs minor mode for org-mode with redmine integration]]
   #+begin_src emacs-lisp :tangle init.el
(leaf *orgmine
  :if  (and my:d:password-store
            (file-directory-p my:d:org))
  :hook
  `(org-mode-hook
    . (lambda ()
        (if (assoc "om_server" org-keyword-properties)
            (orgmine-mode))))
  :init
  (setq enable-local-variables :safe)
  (leaf elmine :ensure t)
  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             (if (assoc "om_server" org-file-properties) (orgmine-mode))))
  (leaf orgmine
    :commands (orgmine-mode)
    :el-get kametoku/orgmine
    :init
    ;; (defun my:orgmine-default-todo-keyword ()
    ;;   "Custom: use `org-file-properties' for backward compatibility."
    ;;   (or (cdr (assoc-string "om_default_todo" org-file-properties))
    ;;       orgmine-default-todo-keyword
    ;;       (nth 0 org-todo-keywords-1)
    ;;       1))

    ;; (defun my:orgmine-setup ()
    ;;   "Custom: use `org-file-properties' for backward compatibility."
    ;;   (let* ((server (cdr (assoc-string "om_server" org-file-properties t)))
	;;          (config (cdr (assoc-string server orgmine-servers t))))
    ;;     (if config
	;;         (set (make-local-variable 'orgmine-server) server))
    ;;     (mapc (lambda (elem)
	;;             (let* ((key (car elem))
	;; 	               (symbol (intern (format "orgmine-%s" key)))
	;; 	               (value (cdr elem)))
	;;               (if (memq key orgmine-valid-variables)
	;; 	              (progn
	;; 	                (set (make-local-variable symbol) value)
	;; 	                (if (eq key 'custom-fields)
	;; 		                (orgmine-setup-custom-fields value)))
	;; 	            (message "orgmine-setup: %s: skipped - invalid name" key))))
	;;           config))
    ;;   (orgmine-setup-tags)
    ;;   (run-hooks 'orgmine-setup-hook))
    ;; :advice
    ;; '((:override orgmine-default-todo-keyword my:orgmine-default-todo-keyword)
    ;;   (:override orgmine-setup my:orgmine-setup))
    :pl-setq orgmine-servers
    :config
    (setq orgmine-note-block-begin "#+begin_src gfm"   ;; 要調整
          orgmine-note-block-end   "#+end_src\n"
          orgmine-default-todo-keyword "新規")
    )
  )
   #+end_src
** OrgとTrelloの連携: =org-trello=
   :PROPERTIES:
   :CUSTOM_ID: org0ea55d7d
   :END:
   ToDo管理に Trello を使い始めたので, 設定
   #+BEGIN_SRC emacs-lisp
;; (leaf org-trello
;;   :if (and my:d:password-store
;;            (file-directory-p my:d:org))
;;   :ensure t
;;   :custom
;;   `((org-trello-files . '(,(expand-file-name "Trello.org" my:d:org))))
;;   )
   #+END_SRC
** Org-Wiki
   :PROPERTIES:
   :CUSTOM_ID: org5f8d1640
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf org-wiki
  :if (file-directory-p "~/Public/cc-env")
  :el-get (org-wiki
           :type github
           :pkgname "uwabami/org-wiki")
  :custom
  `((org-wiki-location     . "~/Public/cc-env")
    (org-wiki-publish-root . "{{site.url}}/cc-env/")
    (org-wiki-template
     . ,(concat "#+TITLE: %n\n"
                "#+date: 20\n"
                "#+LAYOUT: default\n"
                "#+PREMALINK: /cc-env/%n.html\n"
                "#+options: auto-id:nil\n"
                "#+REF: cc-env/%n\n"
                "Related [[wiki:index][Index]] [[~/Public/cc-env/index.org::#orge0707863][Debian]]\n"
                "* %n\n"
                )))
  )
   #+end_src
** Org-Export
   :PROPERTIES:
   :CUSTOM_ID: org54ab7934
   :END:
*** 全般設定
    :PROPERTIES:
    :CUSTOM_ID: org06031219
    :END:
    latex, beamer,jekyll(後述) のみを有効に.
    #+begin_src emacs-lisp :tangle init.el
(leaf ox
  :preface
  ;; 空行の削除
  (defun my:remove-org-newlines-at-cjk-text (&optional _mode)
    "先頭が '*', '#', '|' でなく、改行の前後が日本の文字の場合は改行を除去"
    (interactive)
    (goto-char (point-min))
    (while (re-search-forward "^\\([^|#*\n].+\\)\\(.\\)\n *\\(.\\)" nil t)
      (if (and (> (string-to-char (match-string 2)) #x2000)
               (> (string-to-char (match-string 3)) #x2000))
          (replace-match "\\1\\2\\3"))
      (goto-char (point-at-bol))))
  :hook
  ;; ((org-export-before-processing-hook . my:remove-org-newlines-at-cjk-text))
  :custom
  ((org-export-backends             . '(;; remove somve built-in
                                        ;; html
                                        jekyll
                                        latex
                                        beamer))
   (org-export-with-toc             . nil)
   (org-export-with-section-numbers . nil))
  )
    #+end_src
*** Jekyll, HTML
    :PROPERTIES:
    :CUSTOM_ID: orgd48f8f82
    :END:
    Web サイトは Jekyll で作成しています.
    以前は org file を直接 jekyll で処理していましたが,
    最近は org を html に export して, それを処理する様にしています.

    exporter は [[https://uwabami.github.com/ox-jekyll][uwabami/ox-jekyll]] にあります.
    :PROPERTIES:
    :CUSTOM_ID: org10cd0de1
    :END:
    #+begin_src emacs-lisp :tangle init.el
(leaf ox-html
  :after ox
  :init
  (leaf ox-jekyll
    :if (file-directory-p "~/Public/cc-env")
    :el-get uwabami/ox-jekyll)
  :custom
  ((org-html-table-align-individual-fields . nil)
   (org-html-table-default-attributes      . nil)
   (org-html-html5-fancy                   . t)
   (org-html-doctype                       . "html5")
   ;; (org-html-container-element             . "div")
   (org-html-inline-image-rules
    . '(("file"  . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|webp\\|svg\\)\\'")
        ("http"  . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|webp\\|svg\\)\\'")
        ("https" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|webp\\|svg\\)\\'")))
   )
  :config
  ;;
  (defun my:org-wiki-jekyll-finalized1 (contents backend info)
    "Replace some URL"
    (when (org-export-derived-backend-p backend 'jekyll)
      (s-replace
       (format "<a href=\"file://%sREADME.html"
               (expand-file-name user-emacs-directory))
       "<a href=\"{{baseurl}}/cc-env/Emacs.html"
       contents)))
  ;;
  (defun my:org-wiki-jekyll-finalized2 (contents backend info)
    "Replace some URL"
    (when (org-export-derived-backend-p backend 'jekyll)
      (s-replace
       (format "<a href=\"file://%s"
               (expand-file-name "Public/" (getenv "HOME")))
       "<a href=\"{{site.url}}/"
       contents)))
  ;;
  (defun my:org-wiki-jekyll-finalized3 (contents backend info)
    "Replace some URL"
    (when (org-export-derived-backend-p backend 'jekyll)
      (replace-regexp-in-string
       " id=\"outline-container-org.+\" class=\"outline-.+\""
       "" contents)))
  ;;
  (defun my:org-wiki-jekyll-finalized4 (contents backend info)
    "Replace some URL"
    (when (org-export-derived-backend-p backend 'jekyll)
      (replace-regexp-in-string
       "<a id=\"org.+?\"></a>"
       "" contents)))
  ;;
  (add-to-list 'org-export-filter-body-functions
               'my:org-wiki-jekyll-finalized1)
  (add-to-list 'org-export-filter-body-functions
               'my:org-wiki-jekyll-finalized2)
  (add-to-list 'org-export-filter-body-functions
               'my:org-wiki-jekyll-finalized3)
  (add-to-list 'org-export-filter-body-functions
               'my:org-wiki-jekyll-finalized4)
  )
    #+end_src
*** LaTeX, Beamer
    :PROPERTIES:
    :CUSTOM_ID: org4d9c6533
    :END:
    #+begin_src emacs-lisp :tangle init.el
(leaf ox-latex
  :after ox
  :preface
  :init
  (leaf ox-beamer
    :custom
    `((org-beamer-frame-level . 2)
      (org-beamer-frame-default-options . "fragile,squeeze,c")
      )
    :config
    ;; for Beamer
    (add-to-list 'org-export-options-alist
                 '(:shortdate    "SHORTDATE"   nil nil))
    (add-to-list 'org-export-options-alist
                 '(:shorttitle   "SHORTTITLE"  nil nil))
    (add-to-list 'org-export-options-alist
                 '(:shortauthor  "SHORTAUTHOR" nil nil))
    (add-to-list 'org-export-options-alist
                 '(:institute    "INSTITUTE"   nil nil))
    )
  :custom
  `((org-latex-default-class . "my:uplatex")
    (org-latex-pdf-process   . '("latexmk -pvc %f"))
    (org-latex-classes
     . '(("my:uplatex"
          "\\documentclass[a4j,uplatex]{jsarticle}
            [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]"
          ("\\section\{%s\}" . "\\section*\{%s\}")
          ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
          ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))
         ("my:jlreq"
          "\\documentclass{jlreq}
            [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]"
          ("\\section\{%s\}" . "\\section*\{%s\}")
          ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
          ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))
         ("my:beamer"
          "\\documentclass[dvipdfmx,presentation]{beamer}
             [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]"
          ("\\section\{%s\}" . "\\section*\{%s\}")
          ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
          ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))))
    )
  )
    #+end_src
*** Jekyll
    :PROPERTIES:
    :CUSTOM_ID: org589a50cc
    :END:
    #+begin_src emacs-lisp :tangle init.el
    #+end_src
** Org-Publish
   :PROPERTIES:
   :CUSTOM_ID: orge77c5c82
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf org-publish
  :after (ox-jekyll org-wiki)
  :custom
  `((org-publish-timestamp-directory
    . ,(expand-file-name "org-timestamps.el" my:d:tmp)))
  :config
  (defun org-wiki-publish ()
    (interactive)
    (org-publish (org-wiki-make-org-publish-plist
                  'org-jekyll-publish-to-html)
                 t))
  )
   #+end_src
* Outline Magic
  :PROPERTIES:
  :CUSTOM_ID: org912b87a3
  :END:
  どんどん増えそう．
  #+begin_src emacs-lisp :tangle init.el
(leaf outline
  :init
  (leaf outline-magic
    :ensure t
    :bind ((:outline-minor-mode-map
            ("C-c TAB" . outline-cycle)))
    :hook ((LaTeX-mode-hook . my:add-outline-headings)
           (LaTeX-mode-hook . outline-minor-mode))
    :init
    (defun my:add-outline-headings ()
      "Custom: Add promotion headings"
      (setq outline-promotion-headings '("\\chapter"
                                         "\\section"
                                         "\\subsection"
                                         "\\subsubsection"
                                         "\\paragraph"
                                         "\\subparagraph"
                                         "\\begin{frame}"
                                         )))
    )
  )
  #+end_src
* VCS
  :PROPERTIES:
  :CUSTOM_ID: orgc6b67eb9
  :END:
  まあ, ほとんど Git 関連な訳ですが．
** git{attributes,config,ignore}-mode, git-commit
   :PROPERTIES:
   :CUSTOM_ID: org429f5b00
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf *git
  :init
  (leaf git-commit :ensure t)
  (leaf gitattributes-mode :ensure t)
  (leaf gitconfig-mode :ensure t)
  (leaf gitignore-mode :ensure t)
  )
   #+end_src
** magit:
   :PROPERTIES:
   :CUSTOM_ID: org59371622
   :END:
   magit は Emacs の Git Frontend.
   結局の所 CUI でコマンド叩く事も多いけれど, これはこれで重宝している．
   #+begin_src emacs-lisp :tangle init.el
(leaf magit
  :bind (("C-x g" . magit-status))
  :ensure t
  :init
  (leaf transient
    :custom
    `((transient-history-file
       . ,(expand-file-name "transient-history.el" my:d:tmp))
      (transient-levels-file
       . ,(expand-file-name "transient-levels.el" my:d:tmp))
      (transient-values-file
       . ,(expand-file-name "transient-values.el" my:d:tmp))
      (transient-force-fixed-pitch . t))
    )
  :config
  (setq magit-completing-read-function 'ido-completing-read
        magit-refs-show-commit-count   'all
        magit-log-buffer-file-locked   t
        magit-revision-show-gravatars  nil
        )
  )
   #+end_src
** Forge
   :PROPERTIES:
   :CUSTOM_ID: org6727f452
   :END:
   Gitub/Gitlab と Magit の連携
   #+begin_src emacs-lisp :tangle init.el
(leaf forge
  :disabled t
  :after magit
  )
   #+end_src
** Git Gutter+
   :PROPERTIES:
   :CUSTOM_ID: org994abf0f
   :END:
   飽きたら止めるかもしれないけれど.
   #+begin_src emacs-lisp :tangle init.el
(leaf git-gutter+
  :ensure t
  :blackout `((git-gutter+-mode
               . ,(format "%s" (all-the-icons-octicon "git-merge"))))
  :bind ("C-x G" . global-git-gutter+-mode)
  )
   #+end_src
* 関数定義を辿る: =dump-jump=, =smart-jump=
  :PROPERTIES:
  :CUSTOM_ID: org710c040c
  :END:
  あまり上手く使えていない.
  #+begin_src emacs-lisp :tangle init.el
(leaf dumb-jump
  :disabled t
  :if (executable-find "rg")
  :ensure t
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :custom '((dumb-jump-selector       . 'ido)
            (dumb-jump-force-searcher . 'rg))
  )
(leaf smart-jump
  :disabled t
  :ensure t
  :config
  (smart-jump-setup-default-registers)
  )
  #+end_src
* 言語毎の補完: =company-mode=
  :PROPERTIES:
  :CUSTOM_ID: org935a4dbf
  :END:
  まだうまく使いこなせていない．
  - [[https://qiita.com/wktkshn/items/3ac46671d1c242a59f7e][company-dabbrevで日本語を補完しない]]
  を有効にしてみたが, これで良いのかしら...?
  #+begin_src emacs-lisp :tangle init.el
(leaf company
  :disabled t
  :ensure t
  :blackout t
  :custom
  ((company-require-match             . 'never)
   (company-idle-delay                . 0)
   (company-selection-wrap-around     . t)
   (company-tooltip-align-annotations . t)
   (company-minimum-prefix-length     . 4)
   ;; disable some noisy default backends
   (company-backends . '(company-files
                         company-capf
                         (company-dabbrev-code
                          company-gtags
                          company-etags
                          company-keywords))))
  :bind
  (;; ("<tab>"    . company-indent-or-complete-common)
   (:company-active-map
    ("C-n"     . company-select-next)
    ("C-p"     . company-select-previous)
    ("C-s"     . company-filter-candidates)
    ("C-<tab>" . company-complete-common-or-cycle)
    ("<tab>"   . company-indent-or-complete-common)
    )
   (:company-search-map
    ("C-p" . company-select-previous)
    ("C-n" . company-select-next)))
  :hook
  `((after-init-hook      . global-company-mode)
    (minibuffer-setup-hook . ,(lambda ()
                                (company-mode -1)))
    )
  )
;; (leaf company-statistics
;;   :disabled t
;;   :ensure t
;;   :custom
;;   `((company-statistics-size . 2000)
;;     (company-statistics-file
;;      . ,(expand-file-name "company-statistics-cache.el" my:d:tmp))
;;     (company-transformers
;;      . (company-sort-by-statistics company-sort-by-backed-importance)))
;;   :config
;;   (company-statistics-mode)
;;   )
  ;; :init
  ;; (defun edit-category-table-for-company-dabbrev (&optional table)
  ;;   (define-category ?s "word constituents for company-dabbrev" table)
  ;;   (let ((i 0))
  ;;     (while (< i 128)
  ;;       (if (equal ?w (char-syntax i))
  ;;           (modify-category-entry i ?s table)
  ;;         (modify-category-entry i ?s table t))
  ;;       (setq i (1+ i)))))
  ;; (edit-category-table-for-company-dabbrev)
  ;; ;; (add-hook 'TeX-mode-hook 'edit-category-table-for-company-dabbrev) ; 下の追記参照
  ;; (setq company-dabbrev-char-regexp "\\cs")
  #+end_src
  - [X] [[https://github.com/TheBB/company-reftex][TheBB/company-reftex]]
  - [X] [[https://github.com/vspinu/company-math][vspinu/company-math]]
  - [X] [[https://github.com/alexeyr/company-auctex][alexeyr/company-auctex]]
* SOMEDAY テンプレート補完: =yasnippet= [0/1]
  :PROPERTIES:
  :CUSTOM_ID: orgffdbe5ff
  :END:
  #+begin_src emacs-lisp :tangle init.el
  (leaf yasnippet
    :ensure t
    :blackout t
    :disabled t
    :custom
    `((yas-indent-line  . 'fixed)
      (yas-snippet-dirs . '(,(expand-file-name "snippets" my:d:share))))
    :hook (after-init-hook . yas-global-mode)
    :bind ((:yas-keymap
            ("C-<tab>" . nil)
            ("<tab>"   . nil))  ; for company
           (:yas-minor-mode-map
            ("<tab>"   . nil)
            ("C-<tab>" . nil)
            ("C-c y e" . yas-expand)
            ("C-c y i" . yas-insert-snippet)
            ("C-c y n" . yas-new-snippet)
            ("C-c y v" . yas-visit-snippet-file)
            ("C-c y l" . yas-describe-tables)
            ("C-c y g" . yas-reload-all)))
    :init
    (leaf yasnippet-snippets :ensure t)
    (leaf yatemplate :ensure t)
    )
  #+end_src
  - [ ] 意図しない所で発火してテンプレートが挿入されてしまうので保留中
* SOMEDAY =flymake=: on-the-fly check [0/1]
  :PROPERTIES:
  :CUSTOM_ID: orgd4b6f681
  :END:
  on-the-fly syntax checker.
  同様の拡張には =flycheck= があるけれど,
  =flycheck= はいろいろやりすぎてて私には合わない.
  #+begin_src emacs-lisp :tangle init.el
(leaf flymake
  :ensure t
  )
  #+end_src
  - [ ] 設定調整が必要
* LSP: =lsp-mode=
  :PROPERTIES:
  :CUSTOM_ID: org44ddff4c
  :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf lsp-mode
  :disabled t
  :if (executable-find "fortls")
  :ensure t
  :custom
  `((lsp-print-io             . nil)
    (lsp-trace                . nil)
    (lsp-print-performance    . nil)
    (lsp-auto-guess-root      . t)
    (lsp-document-sync-method . 'incremental)
    (lsp-response-timeout     . 5)
    (lsp-prefer-flymake       .'flymake)
    (lsp-session-file         .,(expand-file-name "lsp-session-v1" my:d:tmp))
   )
  :init
  (leaf lsp-ui
    :ensure t
    :custom
    ((lsp-ui-doc-enable            . t)
     (lsp-ui-doc-header            . t)
     (lsp-ui-doc-include-signature . t)
     (lsp-ui-doc-position          . 'at-point)
     (lsp-ui-doc-max-width         . 150)
     (lsp-ui-doc-max-height        . 30)
     (lsp-ui-doc-use-childframe    . nil)
     (lsp-ui-doc-use-webkit        . nil)
     (lsp-ui-flycheck-enable       . nil)
     (lsp-ui-peek-enable           . t)
     (lsp-ui-peek-peek-height      . 20)
     (lsp-ui-peek-list-width       . 50)
     (lsp-ui-peek-fontify          . 'on-demand) ;; never, on-demand, or always
     )
    )
  :hook
  ((lsp-mode-hook . lsp-ui-mode)
   (f90-mode-hook . lsp))
  )
  #+end_src
* TeX: =AUCTeX=
  :PROPERTIES:
  :CUSTOM_ID: org88a3cb1b
  :END:
  やっている事は
  - japanese-latex-mode において, 幾つかのコマンドが追加/上書きされているが,  あまり使うことの無いコマンドが表示されるのが嫌なのでそれらを削除．
  - コンパイルには[[http://personal.psu.edu/jcc8/software/latexmk/][Latexmk]]を使う
  と言った所.
  [[http://personal.psu.edu/jcc8/software/latexmk/][Latexmk]]の設定には[[https://github.com/tom-tan/auctex-latexmk][auctex-latexmk]]を利用する．
  #+begin_src emacs-lisp :tangle init.el
(leaf auctex
  :if (and (executable-find "uplatex")
           (executable-find "latexmk"))
  :load-path "/usr/share/emacs/site-lisp/auctex"
  :init
  (unless (file-directory-p (expand-file-name "auctex/auto" my:d:tmp))
    (progn
      (make-directory (expand-file-name "auctex/auto" my:d:tmp) t)
      (make-directory (expand-file-name "auctex/style" my:d:tmp) t)))
  (leaf biblio :ensure t)
  (leaf reftex
    :custom
    ((reftex-plug-into-AUCTeX               . t)
     (reftex-cite-prompt-optional-args      . t)
     (reftex-toc-split-windows-horizontally . t)
     ;; (reftex-ref-style-default-list . '("Cleverref"))
     )
    )
  (leaf company-reftex :ensure t)
  ;; (leaf company-auctex :ensure t)
  (leaf auctex-latexmk
    :el-get tom-tan/auctex-latexmk
    :hook (LaTeX-mode-hook . auctex-latexmk-setup)
    :config
    (setq auctex-latexmk-inherit-TeX-PDF-mode nil
          TeX-command-default "LaTeXMk"
          japanese-LaTeX-command-default "LaTeX"
          )
    )
  (load "auctex" t t)
  (load "preview-latex" t t)
  :hook
  (LaTeX-mode-hook . (lambda()
                       (turn-on-reftex)
                       (TeX-source-correlate-mode)
                       (TeX-PDF-mode)
                       (LaTeX-math-mode)
                       ;; (company-auctex-init)
                       (reftex-mode)
                       (outline-minor-mode)))
  :custom
  `((TeX-auto-local
     . ,(expand-file-name "auctex/auto" my:d:tmp))
    (TeX-style-local
     . ,(expand-file-name "auctex/style" my:d:tmp))
    (TeX-parse-self                    . t)
    (TeX-auto-save                     . t)
    (TeX-auto-untabify                 . t)
    (TeX-source-correlate-mode         . t)
    (TeX-source-correlate-start-server . t)
    (TeX-source-correlate-method       . 'synctex)
    (font-latex-fontify-script         . nil)
    (font-latex-script-display         . nil)
    (font-latex-fontify-sectioning     . 1.0)
    )
  :config
  (with-eval-after-load 'tex-jp
    (progn
      (dolist (command '("pTeX" "pLaTeX" "jTeX" "jLaTeX" "jBibTeX" "Mendex"
                         "upMendex" "pBibTeX" "BibTeX" "Biber" "Ps2pdf" ))
        (delq (assoc command TeX-command-list) TeX-command-list))
      (setq TeX-command-output-list '(("LaTeXMk" ("pdf")))
            TeX-view-program-selection '((output-dvi "xdvi")
                                         (output-pdf "Evince")
                                         (output-html "xdg-open")))))
  )
  #+end_src
  =~/.latexmkrc= は以下の通り
  #+begin_src perl :tangle no
#!/usr/bin/env perl
$kanji = defined $ENV{"LATEXENC"} ? "-kanji=$ENV{\"LATEXENC\"}" : "-kanji=utf8" ;
$latex  = "platex -interaction=nonstopmode -src-specials -shell-escape --synctex=1 $kanji" ;
$latex_silent = "platex -interaction=batchmode -src-specials -shell-escape --synctex=1 $kanji" ;
$pdflatex = "ptex2pdf -e -l -ot '-shell-escape -synctex=1 $kanji'";
$bibtex = "pbibtex $kanji";
# disable makeindex/mendex
$makeindex = "touch -m %D";
# if ( $ENV{"LATEXENC"} == "jis" ){
#     $makeindex = "mendex -J %O -c -r -o %D %S ";
# } elsif ( $ENV{"LATEXENC"} == "euc" ){
#     $makeindex = "mendex -E %O -c -r -o %D %S ";
# } elsif ( $ENV{"LATEXENC"} == "sjis" ){
#     $makeindex = "mendex -S %O -c -r -o %D %S";
# } else {
#     $makeindex = "mendex -U %O -c -r -o %D %S";
# }
$dvipdf = "dvipdfmx %O -o %D %S";
$dvips = 'dvips %O -z -f %S | convbkmk -u > %D';
$ps2pdf = 'ps2pdfwr %O %S %D';
$pdf_mode = 3;
$pdf_previewer = 'xdg-open';
# $pdf_previewer = 'fwdevince %S %D';
$pdf_update_method = 1;
$cleanup_mode = 2;
$clean_ext = "snm nav vrb synctex.gz spl bbl blg run.xml pgf-plot.table pgf-plot.gnuplot"
  #+end_src
* Autoconf
  :PROPERTIES:
  :CUSTOM_ID: org898b9a45
  :END:
  いれてみたけれど, はてさて．
  #+begin_src emacs-lisp :tangle init.el
(leaf sh-autoconf
  :el-get (sh-autoconf
           :type http
           :url "https://download.tuxfamily.org/user42/sh-autoconf.el")
  :mode (("/configure\\.\\(ac\\|in\\)\\'"    . sh-mode)
         ("/ac\\(include\\|local\\)\\.m4\\'" . sh-mode))
  )
  #+end_src
* Fortran
  :PROPERTIES:
  :CUSTOM_ID: org11ccc687
  :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf f90
  :mode ("\\.\\(f|F\\)\\(90|95|03|08\\)$" . f90-mode)
  :init
  (leaf f90-indent
    :custom
    ((f90-do-indent               . 3) ;; 2? 4?
     (f90-if-indent               . 3) ;; 2? 4?
     (f90-type-indent             . 3) ;; 2? 4?
     (f90-program-indent          . 3) ;; 2? 4?
     (f90-continuation-indent     . 3) ;; 2? 4?
     (f90-directive-comment-re    . "!omp\\$" )
     (f90-indented-comment-re     . "!" )
     (f90-break-delimiters        . "[-+\\*/><=,% \t]")
     (f90-break-before-delimiters . t)
     (f90-beginning-ampersand     . nil)
     (f90-smart-end               . 'blink)
     (f90-auto-keyword-case       . nil)
     (f90-leave-line-no           . nil)
     (f90-comment-region          . "!! ")
     (f90-indent-comment          . "! "))
    )
  )
  #+end_src
* Markdown
  :PROPERTIES:
  :CUSTOM_ID: org6035cc60
  :END:
  markdown自体はあまり好きじゃないんだけれど,
  必要に迫られて書く事が増えてきたので設定しておく．
  #+begin_src emacs-lisp :tangle init.el
(leaf markdown-mode
  :if (executable-find "pandoc")
  :mode ("\\.\\(md\\|markdown\\|mkd\\)\\'" . gfm-mode)
  :preface
  (defun my:disable-electric-indent-local-mode ()
    (electric-indent-local-mode -1))
  :hook
  `((markdown-mode-hook . my:disable-electric-indent-local-mode)
    (gfm-mode-hook      . my:disable-electric-indent-local-mode))
  :custom
  `((markdown-command
     . "pandoc --from markdown_github -t html5 --mathjax --highlight-style pygments"))
  )
  #+end_src
* SCSS
  :PROPERTIES:
  :CUSTOM_ID: org4b0a1cef
  :END:
  ちょいちょい弄る機会が増えてきたので導入．
  #+begin_src emacs-lisp :tangle init.el
(leaf scss-mode
  :if (executable-find "sass")
  :ensure t
  :mode "\\.scss\\'"
  :custom
  `((scss-sass-command . ,(executable-find "sass")))
  )
  #+end_src
* PlantUML
  :PROPERTIES:
  :CUSTOM_ID: orge4a7e301
  :END:
  #+BEGIN_SRC emacs-lisp
(leaf plantuml-mode
  :if (executable-find "plantuml")
  :ensure t
  :custom
  `((plantuml-executable-path . ,(executable-find "plantuml"))
    (plantuml-default-exec-mode . 'executable))
  :init
;;   (add-to-list
;;    'org-src-lang-modes '("plantuml" . plantuml))
  )
  #+END_SRC
* Re:VIEW
  :PROPERTIES:
  :CUSTOM_ID: org332b8d85
  :END:
  #+BEGIN_SRC emacs-lisp
(leaf review-mode
  :ensure t
  :custom
  `((review-mode-use-skk-mode . t)
    (reivew-use-em            . t)
    )
  )
  #+END_SRC
* その他のモード設定
  :PROPERTIES:
  :CUSTOM_ID: orga28ad005
  :END:
  読み込むだけの mode の設定. 設定が増えたら別途まとめる。
  #+begin_src emacs-lisp :tangle init.el
(leaf *misc-mode
  :init
  (leaf flycheck
    :disabled t
    :ensure t
    :config
    (flycheck-define-checker
     textlint
     "A linter for prose."
     :command ("textlint" "--format" "unix"
               ;; "--rule" "no-mix-dearu-desumasu" "--rule" "max-ten" "--rule" "spellcheck-tech-word"
               source-inplace)
     :error-patterns
     ((warning line-start (file-name) ":" line ":" column ": "
               (id (one-or-more (not (any " "))))
               (message (one-or-more not-newline)
                        (zero-or-more "\n" (any " ") (one-or-more not-newline)))
               line-end))
     :modes (text-mode markdown-mode gfm-mode wl-draft-mode))
    (add-to-list 'flycheck-checkers 'textlint)
    )
  (leaf rd-mode
    :mode "\\.rd$"
    :hook
    (rd-mode-hook . rd-show-other-block-all))
  (leaf yaml-mode
    :ensure t
    :mode "\\(\.yml\\|\.yaml\\)"
    )
  (leaf generic-x)
  (leaf textile-mode :ensure t)
  (leaf lua-mode :ensure t)
  (leaf debian-el)
  (leaf sh-mode
    :custom ((system-uses-terminfo . nil))
    )
  (leaf apt-sources-list :ensure t
    :custom
    ((apt-sources-list-suites
      . '("stable" "stable-backports"
          "testing" "testing-backports"
          "unstable" "experimental"
          "jessie" "jessie-backports"
          "stretch" "stretch-backports"
          "buster" "buster-backports"
          "bullseye"
          "sid")))
    )
  (leaf woman
    ;; :custom-face
    ;; ((woman-bold   . '((t (:inherit font-lock-type-face :bold t))))
    ;; (woman-italic . '((t (:inherit font-lock-keyword-face :underline t)))))
    )
  (leaf info-colors
    :ensure t
    :hook
    (Info-selection #'info-colors-fontify-node))
  )
  #+end_src
** SSH config mode
   :PROPERTIES:
   :CUSTOM_ID: org993cf404
   :END:
   #+begin_src emacs-lisp :tangle init.el
(leaf ssh-config-mode
  :ensure t
  :mode ((("/\\.ssh/config\\'" "/sshd?_config\\'") . ssh-config-mode)
         ("/known_hosts\\'"                        . ssh-known-hosts-mode)
         ("/authorized_keys?\\'"                   . ssh-authorized-keys-mode))
  :hook (ssh-config-mode . turn-on-font-lock)
  )
   #+end_src
* SOMEDAY 日記: =tDiary= [0/1]
  :PROPERTIES:
  :CUSTOM_ID: org9992a617
  :END:
  #+begin_src emacs-lisp :tangle init.el
(leaf tdiary-mode
  :if (and my:d:password-store
           (file-directory-p (concat (getenv "HOME") "/Nextcloud/tdiary")))
  :commands (tdiary-mode tdiary-replace tdiary-append)
  :el-get uwabami/tdiary-mode
  :defvar tdiary-passwd-file
  :pl-setq
  (tdiary-csrf-key tdiary-passwd-file)
  ;; :init
  ;; (setq tdiary-text-save-p t)
  :config
  (setq tdiary-text-directory (concat (getenv "HOME") "/Nextcloud/tdiary/")
        tdiary-diary-list '(("log" "https://uwabami.junkhub.org/log/"))
        tdiary-style-mode 'org-mode
        tdiary-text-suffix ".org"
        tdiary-http-timeout 100
        )
  (tdiary-passwd-file-load)
  ;; (with-eval-after-load 'tdiary-mode
  ;;   (setq tdiary-text-save-p t))
  )
  #+end_src
  - [ ] org2blog で tDiary を更新できないか妄想している
* テーマ, フォント, モードライン, などなど
  :PROPERTIES:
  :CUSTOM_ID: orgbf458527
  :END:
** xterm-color
   :PROPERTIES:
   :CUSTOM_ID: org4c769ff7
   :END:
   色を端末と揃える。
   #+begin_src emacs-lisp :tangle init.el
(leaf xterm-color
  :disabled t
  :ensure t
  :custom
  `((xterm-color-names
     . '["#242424"    ; black
         "#FF5252"    ; red
         "#5CF19E"    ; green
         "#FFD740"    ; yellow
         "#4C4CFF"    ; blue
         "#FF4CFF"    ; magenta
         "#64FCDA"    ; cyan
         "#B0BEC5"]   ; white
     )
    (xterm-color-names-bright
     . '["#4f4f4f"    ; black
         "#FF8A80"    ; red
         "#7FFF7F"    ; green
         "#FFE57F"    ; yellow
         "#7F7FFF"    ; blue
         "#FF7FFF"    ; magenta
         "#A7FDEB"    ; cyan
         "#FFFFFF"]   ; white
     )
    (xterm-color-use-bold-for-bright . t)
    )
  )
   #+end_src
** SOMEDAY フォント [0/1]
   :PROPERTIES:
   :CUSTOM_ID: org356b9857
   :END:
   試行錯誤中. とはいえ, GUIで使う事は滅多に無いのでなかなか弄る機会が無い.
  #+begin_src emacs-lisp :tangle init.el
;;;###autoload
(defun my:load-window-config ()
  "load window-system specific settings"
  (interactive)
  (progn
    (set-face-attribute 'default nil
                        :family "FSMRMP"
                        :height 220)
    (set-face-attribute 'fixed-pitch nil
                        :family "FSMRMP"
                        :height 220)
    (set-face-attribute 'variable-pitch nil
                        :family "FSMRMP"
                        :height 220)
    ;; Japanese
    (set-fontset-font nil
                      'japanese-jisx0213.2004-1
                      (font-spec :family "FSMRMP" :height 220))
    (set-fontset-font nil
                      'japanese-jisx0213-2
                      (font-spec :family "FSMRMP" :height 220))
    (set-fontset-font nil
                      'katakana-jisx0201
                      (font-spec :family "FSMRMP" :height 220))
    ;; Latin with pronounciation annotations
    (set-fontset-font nil
                      '(#x0080 . #x024F)
                      (font-spec :family "FSMRMP" :height 220))
    ;; Math symbols
    (set-fontset-font nil
                      '(#x2200 . #x22FF)
                      (font-spec :family "FSMRMP" :height 220))
    ;; Greek
    (set-fontset-font nil
                      '(#x0370 . #x03FF)
                      (font-spec :family "FSMRMP" :height 220))
    ;; Some Icons
    (set-fontset-font nil
                      '(#xE0A0 . #xEEE0)
                      (font-spec :family "FSMRMP" :height 220))
    ))
;;;###autoload
(defun my:load-side-window-config ()
  "load window-system specific settings"
  (interactive)
  (progn
    (set-face-attribute 'default nil
                        :family "FSMRMP"
                        :height 180)
    (set-face-attribute 'fixed-pitch nil
                        :family "FSMRMP"
                        :height 180)
    (set-face-attribute 'variable-pitch nil
                        :family "FSMRMP"
                        :height 180)
    ;; Japanese
    (set-fontset-font nil
                      'japanese-jisx0213.2004-1
                      (font-spec :family "FSMRMP" :height 180))
    (set-fontset-font nil
                      'japanese-jisx0213-2
                      (font-spec :family "FSMRMP" :height 180))
    (set-fontset-font nil
                      'katakana-jisx0201
                      (font-spec :family "FSMRMP" :height 180))
    ;; Latin with pronounciation annotations
    (set-fontset-font nil
                      '(#x0080 . #x024F)
                      (font-spec :family "FSMRMP" :height 180))
    ;; Math symbols
    (set-fontset-font nil
                      '(#x2200 . #x22FF)
                      (font-spec :family "FSMRMP" :height 180))
    ;; Greek
    (set-fontset-font nil
                      '(#x0370 . #x03FF)
                      (font-spec :family "FSMRMP" :height 180))
    ;; Some Icons
    (set-fontset-font nil
                      '(#xE0A0 . #xEEE0)
                      (font-spec :family "FSMRMP" :height 180))
    ))
(leaf *gui
  :if window-system
  :config
  (set-frame-parameter nil 'alpha 90)
  (setq use-default-font-for-symbols nil)
  (scroll-bar-mode -1)
;;  (my:load-window-config)
  )
  #+end_src
  - [ ] FSMRMP のギリシャ文字が全角にならない. 要調整
  #+BEGIN_EXAMPLE
幅の確認:
Greek, Math, 絵文字は全角, 他は半角で 2:1 になっているかの確認用

|abcdefghijkl|
|ABCDEFGHIJKL|
|'";:-+=/\~`?|
|∞≤≥∏∑∫|
|×±≒≡⊆⊇|
|αβγδεζ|
|ηθικλμ|
|ΑΒΓΔΕΖ|
|ΗΘΙΚΛΜ|
|日本語の美観|
|あいうえおか|
|アイウエオカ|
|ｱｲｳｴｵｶｷｸｹｺｻｼ|

| hoge                 | hogeghoe | age              |
|----------------------+----------+------------------|
| 今日もいい天気ですね | お、     | 等幅になった👍 🍺|
|----------------------+----------+------------------|
  #+END_EXAMPLE
** Major, Minor モードの表示のカスタマイズ: =blackout=
   :PROPERTIES:
   :CUSTOM_ID: org20d8ce5c
   :END:
   基本個々のモードの設定でカスタマイズしているけれども．
   #+begin_src emacs-lisp :tangle init.el
(leaf *modeline-string
  ;; ここでやるより, modeline の設定時に一括で変換した方が良い気もしてきた．
  :blackout ((lisp-interaction-mode
              (all-the-icons-icon-for-mode 'lisp-interaction-mode))
             (emacs-lisp-mode
              (all-the-icons-icon-for-mode 'emacs-lisp-mode))
             (text-mode
              (all-the-icons-icon-for-mode 'text-mode))
             )
  )
   #+end_src
** theme: =doom-theme=
   :PROPERTIES:
   :CUSTOM_ID: org7e722d0e
   :END:
   これまで弄っていた font-lock を
   doom-theme をベースに移植中: [[https://github.com/uwabami/emacs-doom-darkpastel][uwabami/emacs-doom-darkpastel]]
  #+begin_src emacs-lisp :tangle init.el
(setq frame-background-mode (frame-parameter nil 'background-mode))
(leaf *doom-themes
  :init
  (leaf doom-themes :ensure t)
  (leaf emacs-doom-darkpastel
    :el-get (emacs-doom-darkpastel
             :type github
             :pkgname "uwabami/emacs-doom-darkpastel"
             :prepare (add-to-list 'custom-theme-load-path default-directory)
             )
    )
  :custom
  (doom-darkpastel-set-background . nil)
  :config
  (load-theme 'doom-darkpastel t)
  (eaw-and-emoji-fullwidth)
  )
  #+end_src
** modeline
   :PROPERTIES:
   :CUSTOM_ID: org51edfacc
   :END:
   powerline を使ってる
   #+BEGIN_SRC emacs-lisp
(leaf powerline
  :ensure t
  :init
  (defun my:powerline-ddskk ()
    "skkが読み込まれていなくても状態を表示"
    (cond
     ((not (boundp 'skk-modeline-input-mode))
      (setq skk-modeline-input-mode "--[--]:"))
     (t skk-modeline-input-mode)))
  ;;
  (defun my:skk-setup-modeline ()
      "skk-setup-modeline による modeline の更新を無効化"
    (setq skk-indicator-alist (skk-make-indicator-alist))
    (force-mode-line-update t))
  ;;
  (defun my:major-mode-icon (mode)
    "Update file icon in mode-line, just display major-mode icon. not filename."
    (let* ((icon (all-the-icons-icon-for-mode mode)))
    (if (symbolp icon)
        (all-the-icons-faicon "file-code-o"
                              :face 'all-the-icons-dsilver
                              :height 1.0)
      icon)))
  :advice (:override skk-setup-modeline my:skk-setup-modeline)
  :custom
  `((powerline-buffer-size-suffix  . nil)
    (powerline-display-hud         . nil)
    (powerline-display-buffer-size . nil)
    (powerline-text-scale-factor   .  1)
    )
  :config
  (defun my:powerline-theme ()
    "Setup the default mode-line."
    (interactive)
    (my:powerline-ddskk)
    (setq-default
     mode-line-format
     '("%e"
       (:eval
        (let* ((active (powerline-selected-window-active))
               (mode-line-buffer-id (if active 'mode-line-buffer-id 'mode-line-buffer-id-inactive))
               (mode-line (if active 'mode-line 'mode-line-inactive))
               (face1 (if active 'mode-line-highlight 'powerline-inactive2))
               ;; (face1 (if active 'powerline-active1 'powerline-inactive2))
               ;; (face2 (if active 'powerline-active2 'powerline-inactive2))
               ;; (face2 (if active 'mode-line-highlight 'powerline-inactive2))
               (lhs (list (powerline-raw (substring skk-modeline-input-mode 2 -1) mode-line 'l)
                          (powerline-raw "%*" mode-line 'l)
                          (powerline-raw mode-line-mule-info mode-line 'l)
                          (powerline-raw (my:major-mode-icon major-mode) mode-line 'l)
                          ;; (powerline-raw (all-the-icons-icon-for-mode major-mode) mode-line 'l)
                          (powerline-buffer-id mode-line-buffer-id 'l)
                          (powerline-raw " ")
                          ))
               (rhs (list (powerline-raw global-mode-string face1 'r)
                          (powerline-vc face1 'r)
                          (powerline-raw " ")
                          (powerline-raw "%6p" mode-line 'r)
                          )))
          (concat (powerline-render lhs)
                  (powerline-fill face1 (powerline-width rhs))
                  (powerline-render rhs))))))
    )
  (my:powerline-theme)
  ;; (powerline-revert)
  )
   #+END_SRC
* 起動時間の出力
  :PROPERTIES:
  :CUSTOM_ID: orgca1f29da
  :END:
  [[http://memo.sugyan.com/entry/20120120/1327037494][起動時間を計測する 改訂版 - すぎゃーんメモ]]
  #+begin_src emacs-lisp :tangle init.el
(leaf *show-startup-time
  :hook
  (emacs-startup-hook
   . (lambda ()
       (message "init time: %.3f sec"
                (float-time (time-subtract after-init-time before-init-time)))))
  )
  #+end_src
* Debug&Test
  :PROPERTIES:
  :CUSTOM_ID: orgd89ceb4b
  :END:
  #+begin_src emacs-lisp :tangle init.el
;;(leaf emacs
;;  :preface
;;  (defun my-advice/window-width (fn &rest args)
;;    (- (apply fn args) 1))
;;  :advice (:around window-width my-advice/window-width))
;;
;; (leaf elfeed
;;   :if (file-directory-p my:d:password-store)
;;   :ensure t
;;   :custom
;;   `((elfeed-set-timeout  . 36000)
;;     (elfeed-db-directory . "~/.cache/elfeed"))
;;   :config
;;   (leaf elfeed-goodies
;;     :ensure t
;;     :config
;;     (elfeed-goodies/setup))
;;   ;;
;;   (leaf elfeed-protocol
;;     :ensure t
;;     :config
;;     (setq elfeed-feeds
;;           '(("owncloud+https://uwabami@uwabami.junkhub.org/nextcloud"
;;              :password (password-store-get "Web/uwabami.junkhub.org/nextcloud")
;;              )
;;             ))
;;     (elfeed-protocol-enable)
;;     )
;;   )
;;
(leaf vterm
  :ensure t
  :hook
  (vterm-mode-hook
   . (lambda () (setq-local global-hl-line-mode nil)))
  )
(leaf keg :ensure t)
(leaf keg-mode :ensure t)
(leaf esup
  :ensure t
  :custom
  ((esup-insignificant-time . 0.01)
   (esup-depth              . 0)) ;; 🤔
  )
(leaf org-bullets
  :disabled t
  :ensure t
  :custom
   (org-bullets-bullet-list . '(" " "◎ " "□" "・"))
  :hook
  (org-mode-hook
   . (lambda () (org-bullets-mode 1)))
  )
  #+end_src
* 最後に
  :PROPERTIES:
  :CUSTOM_ID: orgf87c4e84
  :END:
** profiler report
   :PROPERTIES:
   :CUSTOM_ID: org8d339cf7
   :END:
   これも必要に応じて
  #+begin_src emacs-lisp :tangle init.el
;; (profiler-report)
;; (profiler-stop)
  #+end_src
** provide の設定
   :PROPERTIES:
   :CUSTOM_ID: org4c97a1e0
   :END:
  #+begin_src emacs-lisp :tangle init.el
(provide 'init)
;; Local Variables:
;; byte-compile-warnings: (not obsolete cl-functions)
;; End:
  #+end_src
** LICENSE
   :PROPERTIES:
   :CUSTOM_ID: orge8960401
   :END:
   幾つかの関数の元ネタとして Emacs 本体のコードを参照したので,
   GPL-3 or later です．
   #+begin_example
Copyright (C) 2011--2017 Youhei SASAKI <uwabami@gfd-dennou.org>
.
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
.
This package is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
.
You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
   #+end_example
